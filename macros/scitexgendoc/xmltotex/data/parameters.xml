<DATA flag="param">

  <PARAMS name='ACTUATOR_f' type='XML'>
    <PARAM name="Input Size">
      Set the regular input port dimension.
      Properties: Type 'mat' of size [1,2].
    </PARAM> 
    <PARAM name="Input Type">
      Set the type of the regular input port.
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Accept herited events 0/1">
      Options to choose event inheritance from
      regular input or from explicit event input (0).
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM    name="Actuator number">
      An integer defining the port number.
      Properties: Type 'vec' of size 1.
    </PARAM> 
  </PARAMS>

  <PARAMS name='ZZAFFICH_f' type='LATEX'>
    <!-- %Font number   1 -->
    <PARAM name="Font number">
      integer, the selected font number (see xset). \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Font size   1 -->
    <PARAM name="Font size">
      integer, the selected font size (set xset) \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Color   1 -->
    <PARAM name="Color">
      integer, the selected color for the text (see xset) \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Total number of digits   9 -->
    <PARAM name="Total number of digits">
      an integer greater than 3, the maximum
      number of digits used to represent the number (sign, integer part
      and rational part)  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Number of rational part digits   2 -->
    <PARAM name="Number of rational part digits">
      n integer greater than or
      equal 0, the number of digits used to represent the rational part \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Block inherits (1) or not (0)   0 -->
    <PARAM name="Block inherits ">
      Options to choose event inheritance from
      regular input (1) or from explicit event input (0).  \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='AFFICH_m' type='LATEX'>
    <PARAM name="Input Size">
      Explicitly define the size of the input port.\\
      Properties: Type 'mat' of size [1,2].
    </PARAM>
    <!-- %Font number   1 -->
    <PARAM name="Font number">
      integer, the selected font number (see xset). \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Font size   1 -->
    <PARAM name="Font size">
      integer, the selected font size (set xset) \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Color   1 -->
    <PARAM name="Color">
      integer, the selected color for the text (see xset) \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Total number of digits   9 -->
    <PARAM name="Total number of digits">
      an integer greater than 3, the maximum
      number of digits used to represent the number (sign, integer part
      and rational part)  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Number of rational part digits   2 -->
    <PARAM name="Number of rational part digits">
      n integer greater than or
      equal 0, the number of digits used to represent the rational part  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Block inherits (1) or not (0)   0 -->
    <PARAM name="Block inherits ">
      Options to choose event inheritance from
      regular input (1) or from explicit event input (0).  \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='AUTOMAT' type='LATEX'>
    <PARAM name="Number of (finite-state) Modes">
      Number of modes in the automation. \\
      Properties: Type 'vec' of size [1,1].
    </PARAM>
    <PARAM name="Initial Mode">
      Initial active mode at the beginning of the simulation. \\
      Properties: Type 'vec' of size [1,1].
    </PARAM>
    <PARAM name="Number of continuous-time states">
      Number of continuous-time states at modes. Note that the number of
      continuous-time states is the same in all modes. \\
      Properties: Type 'vec' of size [-1,1].
    </PARAM>
    <PARAM name="Continuous-time states initial values">
      Initial value of continuous-time states at the beginning of the
      simulation.\\
      Properties: Type 'vec' of size [-1,1].
    </PARAM>
    <PARAM name="Xproperties of continuous-time states in each Mode">
      In this field the state types in mode are given.  A state in an index 1
      DAE can be either differential state or algebraic state. {\it
      Xproperties} vector is coded in an M*N matrix, where M is the
      number of modes and N is the number of states. This matrices
      indicates whether a continuous-time state is algebraic or
      differential in each control mode. If in the {\bf i-th} mode, {\bf j-th} state
      is differential, the (i,j)-th element of the Xproperty matrix
      should set to "+1", otherwise it should set to "-1". Xproperty can
      be given as a 1*N vector if type of states remain the
      same in  all modes.\\
      Properties: Type 'mat' of size [-1,-1].
    </PARAM>
    <PARAM name="Jump from Mode 1:[..;M\_final(Guard=In(1).i);..]">
      The {\it Jump} fields express the mode transition information. Suppose
      that all control modes are labeled from 1 to M. Then, in the field
      corresponding to control mode {\bf i}, destination modes of mode {\bf i}
      are defined in a vector. {\bf j-th} element of this vector gives the
      destination mode when {\bf j-th} jump function:
      \begin{eqnarray}
      {\rm Jump}_{ij}(\dot x,x,u)
      \end{eqnarray}
      becomes positive. For example, if in the field of the mode {\bf 2}, the
      user defines [1;3;4], it means that in mode {\bf 2}, there are three
      active jump functions. When, for example, the third jump function
      becomes positive, a mode transition to mode {\bf 4} will be activated.\\
      Properties: Type 'vec' of size [-1,1].
    </PARAM>
  </PARAMS>

  <PARAMS name='Actuator' type='XML'>
    <PARAM name="k">
      Gain.
      Properties: Type 'vec' of size 1.
    </PARAM> 
  </PARAMS>

  <PARAMS name='Assignment' type='XML'>
    <PARAM name="Number of output dimensions (1 or 2)">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Index Base ( 0 or 1)">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Index Option">
      Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Index">
      Properties: Type 'lis' of size -1.
    </PARAM>
    <PARAM name="Output Size">
      Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Initialize Output (0 or 1)">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Inherit( 0=no, 1=yes)">
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='BACKLASH' type='LATEX'>
    <!-- %initial output   0 -->
    <PARAM name="initial output">
      The initial output value. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %gap   1 -->
    <PARAM name="gap">
      The width of the dead-band. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %use zero-crossing (0:no, 1:yes)   1 -->
    <PARAM name="use zero-crossing ">
      Select to enable use of zero crossing
      detection to detect engagement with lower and upper
      thresholds. \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='BIGSOM_f' type='XML'>
    <PARAM 	name="Inputs ports signs/gain">
      Set sign and a gain for each inputs.
      Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='BITCLEAR' type='XML'>
    <PARAM 	name="Datatype(3=int32 4=int16 5=int8 ...)">
      It indicates the type of the input/output data.
      It support all the integer datatype, number must
      be between 3 and 8.
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM 	name="index of bit (0 is least significant)">
      It indicate the index of the bit to clear.
      When the type is int32 or uint32 the number must be positive
      and less than 32. When the type is int16 or uint16 the number
      must be positive and less than 16. When the type is int8 or
      uint8 the number must be positive and less than 8.
      Properties: Type 'vec' of size 1.
    </PARAM> 
  </PARAMS>

  <PARAMS name='BITSET' type='XML'>
    <PARAM 	name="Datatype(3=int32 4=int16 5=int8 ...)">
      It indicates the type of the input/output data.
      It support all the integer datatype, number must
      be between 3 and 8.
      Properties: Type 'vec' of size 1.
    </PARAM> 
    <PARAM 	name="index of bit (0 is leat significant)">
      It indicate the index of the bit to clear. When the type
      is int32 or uint32 the number must be positive and less
      than 32. When the type is int16 or uint16 the number must
      be positive and less than 16. When the type is int8 or uint8
      the number must be positive and less than 8.
      Properties: Type 'vec' of size 1.
    </PARAM>      
  </PARAMS>

  <PARAMS name='BOUNCE' type='XML'>
    <PARAM name="Mass">
      Properties: Type 'vec' of size -1.
    </PARAM> 
    <PARAM name="Radius">
      Properties: Type 'vec' of size -1.
    </PARAM> 
    <PARAM name="[xmin,xmax,ymin,ymax]">
      Properties: Type 'vec' of size -1.
    </PARAM> 
    <PARAM name="xpos">
      Properties: Type 'vec' of size -1.
    </PARAM> 
    <PARAM name="xdpos">
      Properties: Type 'vec' of size -1.
    </PARAM> 
    <PARAM name="ypos">
      Properties: Type 'vec' of size -1.
    </PARAM> 
    <PARAM name="ydpos">
      Properties: Type 'vec' of size -1.
    </PARAM> 
    <PARAM name="g (gravity)">
      Properties: Type 'vec' of size 1.
    </PARAM> 
    <PARAM name="C (aerodynamic coeff">
      Properties: Type 'vec' of size 1.
    </PARAM> 
  </PARAMS>

  <PARAMS name='BOUNCEXY' type='XML'>
    <PARAM name="colors">
      Properties: Type 'vec' of size -1.
    </PARAM> 
    <PARAM name="radii">
      Properties: Type 'vec' of size -1.
    </PARAM> 
    <PARAM name="window number (-1 for automatic)">
      Properties: Type 'vec' of size 1.
    </PARAM> 
    <PARAM name="animation mode (0,1)">
      Properties: Type 'vec' of size 1.
    </PARAM> 
    <PARAM name="Xmin">
      Properties: Type 'vec' of size 1.
    </PARAM> 
    <PARAM name="Xmax">
      Properties: Type 'vec' of size 1.
    </PARAM> 
    <PARAM name="Ymin">
      Properties: Type 'vec' of size 1.
    </PARAM> 
    <PARAM name="Ymax">
      Properties: Type 'vec' of size 1.
    </PARAM> 
  </PARAMS>

  <PARAMS name='BUSIN_f' type='XML'>
    <PARAM name="Port number">
      An integer defining the port number.
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='BUSOUT_f' type='XML'>
    <PARAM name="Port number">
      An integer defining the port number.
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='Bache' type='XML'>
    <PARAM name="Pression dans le ciel de la bache : Patm (Pa)">
      Atmospheric pressure inside the tank.
      Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Section de la bache : A (m2)">
      Surface area of the tank.
      Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Altitude du piquage d entrée 1: ze1 (m)">
      Altitude of the first input port. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Altitude du piquage d entrée 2: ze2 (m)">
      Altitude of the second input port. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Altitude du piquage de sortie 1: zs1 (m)">
      Altitude of the first output port. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Altitude du piquage de sortie 2: zs2 (m)">
      Altitude of the second output port. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Altitude initiale du fluide : z0 (m)">
      Initial fluid level in the tank. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Température initiale du fluide : T0 (K)">
      Temperature of fluid in the tank. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Si &gt;0, masse volumique imposée du fluide : p_rho (kg/m3)">
      Density of fluid. Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CANIMXY' type='LATEX'>
    <PARAM name="Number of Curves">
      Set the number of curves.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %color ($&lt;$0) or mark ($&gt;$0)   -4 -->
    <PARAM name="color ">
      an integer. It is the color number ({\bf greater than or equal 0}) or marker
      type ({\bf less than 0}) used to draw the evolution of the input port signal.
      See {\bf  xset()}  for color (dash type) definitions.   \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %line or mark size   1 -->
    <PARAM name="line or mark size">
      an integer. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Output window number   1 -->
    <PARAM name="Output window number">
      The number of graphic window used for
      the display. It is often good to use high values to avoid conflict
      with palettes and Super Block windows. If you have more than one
      scope, make sure they don't have the same window numbers (unless
      superposition of the curves is desired).  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Output window position   [] -->
    <PARAM name="Output window position">
      a 2 vector specifying the coordinates
      of the upper left corner of the graphic window. Answer [] for
      default window position.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window sizes   [] -->
    <PARAM name="Output window sizes">
      a 2 vector specifying the width and height
      of the graphic window. Answer [] for default window dimensions.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Xmin   -15 -->
    <PARAM name="Xmin">
      Minimum values of the first input; used to set up the
      X-axis of the plot in the graphics window.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Xmax   15 -->
    <PARAM name="Xmax">
      Maximum values of the first input; used to set up the
      X-axis of the plot in the graphics window.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Ymin   -15 -->
    <PARAM name="Ymin">
      Minimum and maximum values of the second input; used to
      set up the Y-axis of the plot in the graphics window.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Ymax   15 -->
    <PARAM name="Ymax">
      Maximum values of the second input; used to set up the
      Y-axis of the plot in the graphics window.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      An integer value. In order to minimize the number
      of graphics outputs, data may buffered.   \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='CANIMXY3D' type='LATEX'>
    <PARAM name="Number of Curves">
      Set the number of curves.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %color ($&lt;$0) or mark ($&gt;$0)   -4 -->
    <PARAM name="color ">
      an integer. It is the color number ({\bf greater than or equal 0}) or marker
      type ({\bf less than 0}) used to draw the evolution of the input port signal.
      See {\bf  xset()}  for color (dash type) definitions.   \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %line or mark size   1 -->
    <PARAM name="line or mark size">
      an integer. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window number   1 -->
    <PARAM name="Output window number">
      The number of graphic window used for
      the display. It is often good to use high values to avoid conflict
      with palettes and Super Block windows. If you have more than one
      scope, make sure they don't have the same window numbers (unless
      superposition of the curves is desired).  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window position   [] -->
    <PARAM name="Output window position">
      a 2 vector specifying the coordinates
      of the upper left corner of the graphic window. Answer [] for
      default window position.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window sizes   [] -->
    <PARAM name="Output window sizes">
      a 2 vector specifying the width and height
      of the graphic window. Answer [] for default window dimensions.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <PARAM name="Xmin and Xmax">
      Minimum and Maximum values of the first input; used to set up the
      X-axis of the plot in the graphics window.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <PARAM name="Ymin and Ymax">
      Minimum and Maximum values of the second input; used to set up the
      Y-axis of the plot in the graphics window.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <PARAM name="Zmin and Zmax">
      Minimum and Maximum values of the third input; used to set up the
      Z-axis of the plot in the graphics window.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <PARAM name="Alpha and Theta">
      Set Alpha and Theta for the 3D view.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      An integer value. In order to minimize the number
      of graphics outputs, data may buffered.   \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='CBLOCK' type='LATEX'>
    <!-- %simulation function   toto -->
    <PARAM name="simulation function">
      Name of the function to be generated.\\
      Properties: Type 'str' of size 1
    </PARAM>
    <!-- %is block implicit? (y,n)   n -->
    <PARAM name="is block implicit? ">
      If yes (y) is selected, it calls implicit
      solver (dasrt) else (n) it calls explicit solver, lsodar.\\
      Properties: Type 'str' of size 1
    </PARAM>
    <!-- %input ports sizes   1 -->
    <PARAM name="input ports sizes">
      Number of regular input ports\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output ports sizes   1 -->
    <PARAM name="output ports sizes">
      Number of regular output ports\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %input event ports sizes   [] -->
    <PARAM name="input event ports sizes">
      Number of event input ports\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output events ports sizes   [] -->
    <PARAM name="output events ports sizes">
      Number of event output ports\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial continuous state   [] -->
    <PARAM name="initial continuous state">
      Initial Conditions\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %number of zero crossing surfaces   0 -->
    <PARAM name="number of zero crossing surfaces">
      Select to enable zero
      crossing detection. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %initial discrete state   [] -->
    <PARAM name="initial discrete state">
      Initial conditions of the discrete states. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Real parameters vector   [] -->
    <PARAM name="Real parameters vector">
      Real Parameter vector that the function
      accepts.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Integer parameters vector   [] -->
    <PARAM name="Integer parameters vector">
      Integer Parameter vector that the function
      accepts.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial firing vector ($&lt;0 for no firing)   [] -->
    <PARAM name="initial firing vector ">
      A vector. Size of this vector corresponds
      to the number of event outputs. The value of the $i^{th}$ entry
      specifies the time of the preprogrammed event firing on the $i^{th}$
      output event port. If less than zero, no event is preprogrammed.\\
      Properties: Type 'vec' of size 'sum(\%6)'
    </PARAM>
    <!-- %direct feedthrough (y or n)   \%t -->
    <PARAM name="direct feedthrough ">
      The input to the block at the current time
      determine the output of the block at the current time. This forces
      the input to feed through to the output, as if the system were
      operating at steady-state.   \\
      Properties: Type 'str' of size 1
    </PARAM>
    <!-- %time dependence (y or n)   \%f -->
    <PARAM name="time dependence ">
      Create a signal that specifies the time dependence.\\
      Properties: Type 'str' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='CBLOCK4' type='LATEX'>
    <!-- %simulation function   toto -->
    <PARAM name="Simulation function">
      Name of the function to be generated and loaded.\\
      Properties: Type 'str' of size 1
    </PARAM>
    <!-- %input ports sizes   1 -->
    <PARAM name="Input ports sizes">
      Number and size of regular input ports. \\
      Properties: Type 'mat' of size [-1,2]
    </PARAM>
    <!-- %input ports type   1 -->
    <PARAM name="Input ports type">
      Set the datatype of the regular input ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output port sizes   1 -->
    <PARAM name="Output port sizes">
      Number and size of regular output ports. \\
      Properties: Type 'mat' of size [-1,2]
    </PARAM>
    <!-- %output ports type   1 -->
    <PARAM name="Output ports type">
      Set the datatype of the regular output ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %input event ports sizes   [] -->
    <PARAM name="Input event ports sizes">
      a vector of ones, size of event input
      ports. The size of the vector gives the number of event
      input ports.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output events ports sizes   [] -->
    <PARAM name="Output events ports sizes">
      a vector of ones, size of event
      output ports. The size of the vector gives the number of of event
      output ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial continuous state   [] -->
    <PARAM name="Initial continuous state">
      A column vector of Initial State
      Conditions.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial discrete state   [] -->
    <PARAM name="Initial discrete state">
      A column vector Initial discrete  Conditions.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial object state list() -->
    <PARAM name="Initial object state">
      A Scilab list that defines the initial object state (oz).\\
      Properties: Type 'lis' of size -1
    </PARAM>
    <!-- %Real parameters vector   [] -->
    <PARAM name="Real parameters vector">
      column vector. Any parameters used in the block can be defined here as a column vector.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Integer parameters vector   [] -->
    <PARAM name="Integer parameters vector">
      column vector. Any integer
      parameters used in the block can be defined here as a column
      vector. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %object parameters list  list() -->
    <PARAM name="Object parameters list  ">
      A Scilab list that defines the list of    the Object parameters (opar).\\
      Properties: Type 'lis' of size -1
    </PARAM>
    <!-- %number of modes   0 -->
    <PARAM name="Number of modes">
      Number of Right hand side functions in the
      system. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %number of zero\_crossings   0 -->
    <PARAM name="Number of zero\_crossings">
      Number of zero-crossing surfaces\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %initial firing vector ($&lt;$0 for no firing)   [] -->
    <PARAM name="Initial firing vector ">
      vector. Size of this vector corresponds
      to the number of event outputs. The value of the i-th entry
      specifies the time of the preprogrammed event firing on the i-th
      output event port. If less than zero, no event is preprogrammed.\\
      Properties: Type 'vec' of size sum(\%7)
    </PARAM>
    <!-- %direct feedthrough (y or n)   y -->
    <PARAM name="Direct feedthrough ">
      character "y" or "n", specifies if block
      has a direct input to output feedthrough. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %time dependence (y or n)   n -->
    <PARAM name="Time dependence ">
      Time dependance: character "y" or "n",
      specifies if block output depends explicitly on time. \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='CEVENTSCOPE' type='LATEX'>
    <!-- %Number of event inputs   1 -->
    <PARAM name="Number of event inputs">
      an integer giving the number of event
      input ports colors: a vector of integers. The i-th element is the
      color number ({\bf greater than or equal 0}) or dash type ({\bf less than 0}) used to draw the evolution of
      the i-th input port signal. See  {\bf xset}  for color (dash type)
      definitions.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %colors c ($&gt;$0) or mark ($&lt;$0)   1 -->
    <PARAM name="colors c ">
      an integer. It is the color number ({\bf greater than 0}) or dash
      type ({\bf less than 0}) used to draw the evolution of the input port signal. See
      {\bf plot2d}  for color (dash type) definitions.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window number   1 -->
    <PARAM name="Output window number">
      The number of graphic window used for the
      display. It is often good to use high values to avoid conflict with
      palettes and Super Block windows. If you have more than one scope,
      make sure they don't have the same window numbers (unless
      superposition of the curves is desired). Output window position: a
      2 vector specifying the coordinates of the upper left corner of the
      graphic window. Answer [] for default window position.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Output window position   [] -->
    <PARAM name="Output window position">
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window sizes   [600;400] -->
    <PARAM name="Output window sizes">
      a 2 vector specifying the width and height
      of the graphic window. Answer [] for default window dimensions.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Refresh period   30 -->
    <PARAM name="Refresh period">
      Maximum value on the X-axis (time). The plot is
      redrawn when time reaches a multiple of this value.   \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='CFSCOPE' type='LATEX'>
    <!-- %Color ($&gt;$0) or mark ($&lt;$0) vector (8 entries)   1 3 5 7 9 11 13 15 -->
    <PARAM name="Color ">
      a vector of integers. The i-th element is the color
      number ({\bf greater than 0}) or dash type ({\bf less than 0}) used to draw the evolution
      of the i-th input port signal. See  {\bf plot2d}  for color
      (dash type) definitions. \\
      Properties: Type 'vec' of size 8
    </PARAM>
    <!-- %Output window number (-1 for automatic)   -1 -->
    <PARAM name="Output window number ">
      The number of graphic window used for    the display. It is often good to use high values to avoid
      conflict with palettes and Super Block windows. If default
      value is used {\bf (1)}, Scicos define the output window
      number. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Output window position   [] -->
    <PARAM name="Output window position">
      a 2 vector specifying the coordinates
      of the upper left corner of the graphic window. Answer [] for    default window position. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window sizes   [600;400] -->
    <PARAM name="Output window sizes">
      a 2 vector specifying the coordinates of
      the upper left corner of the graphic window. Answer []
      for default window position.   \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Ymin   -15 -->
    <PARAM name="Ymin">
      Minimum  values of the input; used to set up the Y-axis
      of the plot in the graphics window.   \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Ymax   15 -->
    <PARAM name="Ymax">
      Maximum values of the input; used to set up the Y-axis
      of the plot in the graphics window.   \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Refresh period   30 -->
    <PARAM name="Refresh period">
      Maximum value on the X-axis (time). The plot
      is redrawn when time reaches a multiple of this value. \\
      Properties: Type 'vec' of size
    </PARAM>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      To improve efficiency it is possible to buffer the
      input data. The drawing is only done after each
      {\bf Buffer size} call to the block. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Links to view   1 -->
    <PARAM name="Links to view">
      This parameter allows you to display the output
      of specified link. \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>
  
  <PARAMS name='CLKFROM' type='XML'>
    <PARAM name="Tag">
      The tag of the CLKGOTO block passing the signal to
      this CLKFROM block. Properties: Type 'str' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CLKGOTO' type='XML'>
    <PARAM name="Tag">
      This parameter identifies the Goto block whose scope
      is defined in this block. Properties: Type 'str' of size -1.
    </PARAM>
    <PARAM name="Tag Visibility (1=Local 2=Scoped 3=Global)">
      This parameter idetifies the visibility of the block.
      It can be local(1), scoped(2) or global(3). Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>
  
  <PARAMS name='CLKGotoTagVisibility' type='XML'>
    <PARAM name="GotoTag">
      The Goto block tag whose visibility is defined by the
      location of this block. Properties: Type 'str' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CLKINV_f' type='XML'>
    <PARAM name="Port number">
      an integer defining the port number. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CLKIN_f' type='XML'>
    <PARAM name="Port number">
      an integer defining the port number. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CLKOUTV_f' type='XML'>
    <PARAM name="Port number">
      an integer defining the port number. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CLKOUT_f' type='XML'>
    <PARAM name="Port number">
      an integer defining the port number. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>
  
  <PARAMS name='CLOCK_c' type='LATEX'>
    <!-- %@ lan -->
    <PARAM name="Period">
      scalar. \\
      One over the frequency of the clock. \\
      Period is the time that separates two output events.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Init time">
      scalar. \\
      Starting date. \\
      If negative the clock never starts.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CLOCK_f' type='LATEX'>
    <!-- %P eriod   0.1 -->
    <PARAM name="Period">
      scalar. One over the frequency of the clock. Period is
      the time that separates two output events.  \\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %I nit time   0.1 -->
    <PARAM name="Init time">
      scalar. Starting date. if negative the clock never
      starts. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>
  
  <PARAMS name='CLR' type='LATEX'>
    <!-- %N umerator (s)   1 -->
    <PARAM name="Numerator">
      This parameter sets the numerator of the transfer function.\\
      This must be a polynomial in s.\\
      Properties: Type 'pol' of size 1.
    </PARAM>
    <!-- %D enominator (s)   1+s -->
    <PARAM name="Denominator">
      This parameter sets the denominator of the transfer function.\\
      This must be a polynomial in s.\\
      Properties: Type 'pol' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CLR_f' type='LATEX'>
    <!-- %N umerator (s)   1 -->
    <PARAM name="Numerator">
      This parameter sets the numerator of the transfer function.\\
      This must be a polynomial in s.\\
      Properties: Type 'pol' of size 1.
    </PARAM>
    <!-- %D enominator (s)   1+s -->
    <PARAM name="Denominator">
      This parameter sets the denominator of the transfer function.\\
      This must be a polynomial in s.\\
      Properties: Type 'pol' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CLSS' type='LATEX'>
    <!-- %A  matrix   -1 -->
    <PARAM name="A matrix">
      A square matrix. \\
      Properties: Type 'mat' of size [-1,-1].
    </PARAM>
    <!-- %B  matrix   1 -->
    <PARAM name="B matrix">
      The {\bf B} matrix,  []  if system has no input.\\
      Properties: Type 'mat' of size \verb+["size(\%1,2)","-1"]+.
    </PARAM>
    <!-- %C  matrix   1 -->
    <PARAM name="C matrix">
      The  {\bf C}  matrix ,  []  if system has no output.\\
      Properties: Type 'mat' of size \verb+["-1","size(\%1,2)"]+.
    </PARAM>
    <!-- %D  matrix   0 -->
    <PARAM name="D matrix">
      The {\bf D}  matrix,  []  if system has no  D  term.\\
      Properties: Type 'mat' of size [-1,-1].
    </PARAM>
    <!-- %I nitial state   0 -->
    <PARAM name="Initial state">
      A vector/scalar initial state of the system.\\
      Properties: Type 'vec' of size "size(\%1,2)".
    </PARAM>
  </PARAMS>

  <PARAMS name='CLSS_f' type='LATEX'>
    <!-- %A  matrix   -1 -->
    <PARAM name="A matrix">
      A square matrix. \\
      Properties: Type 'mat' of size [-1,-1].
    </PARAM>
    <!-- %B  matrix   1 -->
    <PARAM name="B matrix">
      The {\bf B} matrix,  []  if system has no input.\\
      Properties: Type 'mat' of size ["size(\%1,2)","-1"].
    </PARAM>
    <!-- %C  matrix   1 -->
    <PARAM name="C matrix">
      The {\bf C} matrix ,  []  if system has no output.\\
      Properties: Type 'mat' of size ["-1","size(\%1,2)"].
    </PARAM>
    <!-- %D  matrix   0 -->
    <PARAM name="D matrix">
      The {\bf D}  matrix,  []  if system has no  D  term.\\
      Properties: Type 'mat' of size [-1,-1].
    </PARAM>
    <!-- %I nitial state   0 -->
    <PARAM name="Initial state">
      A vector/scalar initial state of the system.\\
      Properties: Type 'vec' of size "size(\%1,2)".
    </PARAM>
  </PARAMS>

  <PARAMS name='CMAT3D' type='XML'>
    <PARAM name="Bounds Vector X (-1 for standard)">
      If you let -1 the x ticks would be between 0 and 1
      else you can put your own vector. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Bounds Vector Y (-1 for standard)">
      If you let -1 the x ticks would be between 0 and 1
      else you can put your own vector. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="ColorMap">
      The colormap is a range color linked to the window output
      of the scope. You can put a jetcolormap or hotcolormap or
      graycolormap or your own (see colormap help). Properties: Must be a mx3 matrix and m >= 3
    </PARAM>
    <PARAM name="Zmin">
      Minimum value in Z values. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Zmax">
      Maximum values in Z values. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CMATVIEW' type='XML'>
    <PARAM name="ColorMap">
      The colormap is a range color linked to the window output of
      the scope. You can put a jetcolormap or hotcolormap or
      graycolormap or your own (see colormap help). Properties: Must be a mx3 matrix and m >= 3
    </PARAM>
    <PARAM name="Minimum level range">
      The minimum level range is the minimum value who comes in the
      regular input port. It would be linked to the 'cold value'
      of the colormap. Properties: A scalar
    </PARAM>
    <PARAM name="Maximum level range">
      The maximum level range is the maximum value who comes in the
      regular input port. It would be linked to the 'hot value'
      of the colormap. Properties: A scalar
    </PARAM>
  </PARAMS>

  <PARAMS name='CMSCOPE' type='LATEX'>
    <!-- %Input ports sizes   1 1 -->
    <PARAM name="Input ports sizes">
      It allows multiple input ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Drawing colors ($&gt;$0) or mark ($&lt;$0)   1 3 5 7 9 11 13 15 -->
    <PARAM name="Drawing colors ">
      a vector of integers. The i-th element is the color
      number ({\bf greater than 0}) or dash type ({\bf less than 0}) used to draw the evolution
      of the i-th input port signal. See {\bf plot2d} for color
      (dash type) definitions. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window number   1 -->
    <PARAM name="Output window number">
      The number of graphic window used for the display.
      It is often good to use high values to avoid conflict    with palettes and Super Block windows. If default value
      is used {\bf (1)}, Scicos define the output window number. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Output window position   [] -->
    <PARAM name="Output window position">
      a 2 vector specifying the coordinates
      of the upper left corner of the graphic window. Answer [] for    default window position. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window sizes   [] -->
    <PARAM name="Output window sizes">
      a 2 vector specifying the coordinates of
      the upper left corner of the graphic window. Answer [] for
      default window position. \\
      Properties: Type 'vec' of size size -1
    </PARAM>
    <!-- %Ymin vector   -1 -5 -->
    <PARAM name="Ymin vector">
      Minimum  values of the input; used to set up the Y-axis
      of the plot in the graphics window. \\
      Properties: Type 'vec' of size size(\%1,'*') 
    </PARAM>
    <!-- %Ymax vector   1 5 -->
    <PARAM name="Ymax vector">
      Maximum values of the input; used to set up the Y-axis
      of the plot in the graphics window.  \\
      Properties: Type 'vec' of size size(\%1,'*') 
    </PARAM>
    <!-- %Refresh period   30 -->
    <PARAM name="Refresh period">
      Maximum value on the X-axis (time). The plot
      is redrawn when time reaches a multiple of this value.\\
      Properties: Type 'vec' of size size(\%1,'*') 
    </PARAM>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      To improve efficiency it is possible to buffer the
      input data. The drawing is only done after each    {\bf Buffer size} call to the block. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Accept herited events 0/1   0 -->
    <PARAM name="Accept herited events 0/1">
      if 0  {\bf CSCOPE\_f}  draws a new point
      only when an event occurs on its event input port. if 1
      {\bf CSCOPE\_f}	draws a new point when an event occurs    on its event input port and when it's regular input changes
      due to an event on an other upstrem block (herited events). \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Name of Scope (label\&amp;Id) -->
    <PARAM name="Name of Scope ">
      Name/label of the block. \\
      Properties: Type 'str' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='CONST' type='XML'>
    <PARAM name="Constant">
      The constant value. Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CONSTRAINT2_c' type='XML'>
    <PARAM name="Initial guess values of states x">
      Initial value of the states  used as initial guess to help the
      solver to converge toward the desired solution. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Initial guess values of derivative x'">
      Initial guess value of the derivatives of states used as initial guess to help the
      solver to converge toward the desired solution specially at the
      beginning of the simulation. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Id(i)=1: if x'(i) is present in the feedback, else Id(i)=0">
      The elemenets of this vector indicate if the derivative of the
      corresponding state has been used in the feedback path, i.e., if
      it exists in the function f(x',x)=0. Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CONSTRAINT_c' type='XML'>
    <PARAM name="Initial guess values">
      Initial value of the state  used as initial guess to help the
      solver to converge toward the desired solution. Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CONST_f' type='LATEX'>
    <!-- %Constant   1 -->
    <PARAM name="Constant">
      a real vector. The vector size gives the size of the
      output port. The value  {\bf constants(i)}  is assigned to the
      ith component of the output.  \\
      Properties:  Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CONST_m' type='XML'>
    <PARAM name="Constant">
      A matrix of any type.The size of the matrix gives the size of the regular
      output port.The constant(i,j) value is the component(i,j) value of the
      output port.From this value the block inherits its data type. Properties: Type 'mat' of size [-1,-2].
    </PARAM>
  </PARAMS>

  <PARAMS name='CONVERT' type='XML'>
    <PARAM name="input type (-1=inherit 1=double 3=int32 4=int16 5=int8 ...)">
      It indicates the input data type, it can be a double
      or an integer. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="output type (-2=inherit 1=double 3=int32 4=int16 5=int8 ...)">
      It indicates the output data type, it can be a double
      or an integer. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Do on Overflow(0=Nothing 1=Saturate 2=Error)">
      When this parameter is set to zero the result is similar to
      a normal multiplication of two integer matrix. When it is set
      to 1, on overflow the block saturate the result. When it is
      set to 2, on overflow an error message box appears. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CSCOPE' type='LATEX'>
    <!-- %Color ($&gt;$0) or mark ($&lt;$0) vector (8 entries)   1 3 5 7 9 11 13 15 -->
    <PARAM name="Color ">
      a vector of integers. The i-th element is the color
      number ({\bf greater than 0}) or dash type ({\bf less than 0}) used to draw the evolution
      of the i-th input port signal. See {\bf plot2d} for color
      (dash type) definitions. \\
      Properties: Type 'vec' of size 8
    </PARAM>
    <!-- %Output window number (-1 for automatic)   -1 -->
    <PARAM name="Output window number ">
      The number of graphic window used for    the display. It is often good to use high values to avoid
      conflict with palettes and Super Block windows. If default
      value is used {\bf (1)}, Scicos define the output window
      number. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Output window position   [] -->
    <PARAM name="Output window position">
      a 2 vector specifying the coordinates
      of the upper left corner of the graphic window.
      Answer [] for default window position.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Output window sizes   [600;400] -->
    <PARAM name="Output window sizes">
      a 2 vector specifying the coordinates of
      the upper left corner of the graphic window.
      Answer [] for default window position.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Ymin   -15 -->
    <PARAM name="Ymin">
      Minimum  values of the input; used to set up the Y-axis
      of the plot in the graphics window.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Ymax   15 -->
    <PARAM name="Ymax">
      Maximum values of the input; used to set up the Y-axis
      of the plot in the graphics window.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Refresh period   30 -->
    <PARAM name="Refresh period">
      Maximum value on the X-axis (time). The plot
      is redrawn when time reaches a multiple of this value.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      To improve efficiency it is possible to buffer the
      input data. The drawing is only done after each  {\bf Buffer size}
      call to the block.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Accept herited events 0/1   0 -->
    <PARAM name="Accept herited events 0/1">
      if 0  {\bf CSCOPE\_f}  draws a new point
      only when an event occurs on its event input port.    If 1 {\bf CSCOPE\_f} draws a new point when an event occurs
      on its event input port and when it's regular input changes
      due to an event on an other upstream block (herited events). \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Name of Scope (label\&amp;Id) -->
    <PARAM name="Name of Scope ">
      Name/label of the block. \\
      Properties: Type 'str' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='CSCOPXY' type='LATEX'>
    <PARAM name="Number of Curves ">
      Set the number of curves.
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %color ($&gt;$0) or mark ($&lt;$0)   4 -->
    <PARAM name="color ">
      an integer. It is the color number ({\bf greater than 0}) or dash type
      ({\bf less than 0}) used to draw the evolution of the input port signal. See
      {\bf plot2d}  for color (dash type) definitions.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %line or mark size   1 -->
    <PARAM name="line or mark size">
      an integer. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Output window number   1 -->
    <PARAM name="Output window number">
      The number of graphic window used for the
      display. It is often good to use high values to avoid conflict with
      palettes and Super Block windows. If you have more than one scope,
      make sure they don't have the same window numbers (unless
      superposition of the curves is desired).  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Output window position   [] -->
    <PARAM name="Output window position">
      a 2 vector specifying the coordinates
      of the upper left corner of the graphic window. Answer [] for
      default window position.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window sizes   [600;400] -->
    <PARAM name="Output window sizes">
      a 2 vector specifying the width and
      height of the graphic window. Answer [] for default window
      dimensions.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Xmin   -15 -->
    <PARAM name="Xmin">
      Minimum  values of the first input; used to
      set up the X-axis of the plot in the graphics window.  \\
      Properties: Type '' of size
    </PARAM>
    <!-- %Xmax   15 -->
    <PARAM name="Xmax">
      Maximum values of the first input; used to
      set up the X-axis of the plot in the graphics window. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Ymin   -15 -->
    <PARAM name="Ymin">
      Minimum values of the second input; used to set up the
      Y-axis of the plot in the graphics window.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Ymax   15 -->
    <PARAM name="Ymax">
      Maximum values of the second input; used to set up the
      Y-axis of the plot in the graphics window. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      To improve efficiency it is possible to buffer
      the input data. The drawing is only done after each  Buffer size
      call to the block.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='CSCOPXY3D' type='LATEX'>
    <PARAM name="Number of Curves">
      Set the number of curves.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %color ($&lt;$0) or mark ($&gt;$0)   -4 -->
    <PARAM name="color ">
      an integer. It is the color number ({\bf greater than or equal 0}) or marker
      type ({\bf less than 0}) used to draw the evolution of the input port signal.
      See {\bf  xset()}  for color (dash type) definitions.   \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %line or mark size   1 -->
    <PARAM name="line or mark size">
      an integer. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window number   1 -->
    <PARAM name="Output window number">
      The number of graphic window used for
      the display. It is often good to use high values to avoid conflict
      with palettes and Super Block windows. If you have more than one
      scope, make sure they don't have the same window numbers (unless
      superposition of the curves is desired).  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window position   [] -->
    <PARAM name="Output window position">
      a 2 vector specifying the coordinates
      of the upper left corner of the graphic window. Answer [] for
      default window position.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Output window sizes   [] -->
    <PARAM name="Output window sizes">
      a 2 vector specifying the width and height
      of the graphic window. Answer [] for default window dimensions.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <PARAM name="Xmin and Xmax">
      Minimum and Maximum values of the first input; used to set up the
      X-axis of the plot in the graphics window.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <PARAM name="Ymin and Ymax">
      Minimum and Maximum values of the second input; used to set up the
      Y-axis of the plot in the graphics window.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <PARAM name="Zmin and Zmax">
      Minimum and Maximum values of the third input; used to set up the
      Z-axis of the plot in the graphics window.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <PARAM name="Alpha and Theta">
      Set Alpha and Theta for the 3D view.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      An integer value. In order to minimize the number
      of graphics outputs, data may buffered.   \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='CUMSUM' type='XML'>
    <PARAM name="Datatype(1=real double  2=Complex)">
      It indicates the type of the output. It support only the two
      types double (1) and complex (2). If we input another entry
      in this label Scicos will print the message "Datatype is not
      supported". Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Sum along (0=the first non singleton dimension  1=Rows  2=Columns)">
      Indicate whether to sum across the rows, the columns or the
      first non singleton dimension. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='CURVE_c' type='LATEX'>
    <PARAM name="Spline Method (0..7)">
      accepted values are {\bf 0, 1, 2, 3, 4, 5, 6, 7}.\\
      This parameter defines the spline method for interpolating the
      points. The Signal builder block computes a linear or a cubic
      spline or sub-spline {\bf S} which interpolates the {\bf (x\_i,y\_i)}
      points, i.e., we have    $$S(x_i)=y_i\;\;{\rm for\;\;all}\;\; i=1,..,n$$.
      Several kind of splines may be computed by selecting the appropriate
      spline method:
      <PARAMS>
	<PARAM name="0: Zero order method"> This method generates a piecewise
	constant signal. i.e., for
	$$t_{i} \leq t &lt; t_{i+1},\;\; y(t)=y_{i}$$
	</PARAM>
	<PARAM name="1: Linear method"> This method generates a piecewise
	linear signal. i.e., for
	$$t_i \leq t &lt; t_{i+1},$$
	$$y(t)=y_i+(t-t_i)(y_{i+1}-y_i)/(t_{i+1}-t_i).$$
	</PARAM>
	<PARAM name="2: Order 2 method"> The interpolation is done by passing
	2-order polynomials between {\bf (x\_i,y\_i)} and
	{\bf (x\_i+1,y\_i+1) (x\_i+1,y\_i+1)}. The Derivative at {\bf (x\_i,y\_i)} is identical
	for two adjacent polynomials. The derivative at {\bf (x\_1,y\_1)}
	can be selected arbitrary, so it is selected such that the sum of
	derivatives at all points be minimum. This condition provides a
	less fluctuated signal.
	</PARAM>
	<PARAM name="3: not\_a\_knot"> The cubic spline is computed by using the
	following conditions (considering {\bf n} points {\bf x\_1,...,x\_n}):
	$$S^{(3)}(x_2^-) = S^{(3)}(x_2^+)$$
	$$S^{(3)}(x_{n-1}^-) = S^{(3)}(x_{n-1}^+)$$
	</PARAM>
	<PARAM name="4: periodic"> A periodic cubic spline is computed ({\bf y}
	must verify {\bf y\_1=y\_n}) by using the conditions:
	$$S^{'}(x_1) = S^{'}(x_n)$$    $$S^{''}(x_1) = S^{''}(x_n)$$.
	In this case the value of {\bf y\_n} is ignored and {\bf y\_1} is used instead.
	Note that in order to generate a periodic signal, {\it Periodic} flag should be
	activated.
	</PARAM>
	<PARAM name="5: monotone"> In this case a sub-spline ({\bf S} is only one
	continuously differentiable) is computed such that {\bf S} is monotone
	on each interval: \\
	$${\rm if}\;\; y_i \le y_{i+1},\;\;S\;\;{\rm is\;\; increasing\;\; on}\;\;[x_i, x_{i+1}].$$
	$${\rm if}\;\; y_i > y_{i+1},\;\;S\;\;{\rm is\;\; decreasing\;\; on}\;\;[x_i, x_{i+1}].$$
	</PARAM>
	<PARAM name="6: clamped"> In this case the cubic spline is computed by
	using the end points derivatives which are set to zero, i.e.,
	$$S^{'}(x_1) = S^{'}(x_n)=0$$
	</PARAM>
	<PARAM name="7: fast"> In this case a sub-spline is computed by using a
	simple local scheme for the derivative at {\bf x\_i} of the
	interpolation polynomial of {\bf (x\_i-1,y\_i-1)}, {\bf (x\_i,y\_i)},
	{\bf (x\_i+1,y\_i+1)}, except for the end points (derivative at
	these points are computed from the 3 left most points and the 3
	right most points).
	</PARAM>
      </PARAMS>
    </PARAM>
    <PARAM name="x"> Abscissa data vector (X-axis). This vector can be
    either a row or a column vector of double data.  This vector can
    be also defined in the Scicos context. The data vector can be
    specified by mathematical formula.
    </PARAM>
    <PARAM name="y"> Ordinate data vector (Y-axis). This vector can be
    either a row or a column vector of double data. Not that the size
    of X and Y vector should be the same. This vector can be also
    defined in the Scicos context. The data vector can also be
    specified by formula.
    </PARAM>
    <PARAM name="Periodic signal(y/n)"> If {\bf y} is selected, the created
    signal will be periodic with the period of {\bf t\_n}. Note that if the
    {\it Periodic} spline method is selected, the output signal will be
    a continuous signal, otherwise the signal will be discontinuous at
    endpoints.
    </PARAM>
    <PARAM name="Launch graphical window (y/n)"> If {\bf y} is selected, by
    clicking on {\bf OK} button, a graphical window is launched. In
    this 2D graphical window, the user can edit data points:
    <PARAMS>
      <PARAM name="Mouse left click on the window"> adding a new data point</PARAM>
      <PARAM name="Mouse right click on the window"> remove a data point</PARAM>
      <PARAM name="Mouse left double-click on a data point"> edit a point's coordinates</PARAM>
      <PARAM name="Mouse left button press/drag/release"> move a data point</PARAM>
      <PARAM name="Autoscale menu"> Rescaling the window to show all data points properly.</PARAM>
      <PARAM name="Spline/Method menu"> Selecting the spline interpolation method.</PARAM>
      <PARAM name="Data/Clear menu"> removing all data points</PARAM>
      <PARAM name="Data/Data\_Bounds menu"> Change the window size</PARAM>
      <PARAM name="Data/Load\_from\_text\_file menu"> reading data points
      from a text data file (using C data format)</PARAM>
      <PARAM name="Data/save\_to\_text\_file menu"> saving the data points
      to a text data file (using C data format)</PARAM>
      <PARAM name="Data/Load\_from\_excel menu"> Reading data from an
      excel file.</PARAM>
      <PARAM name="Data/Periodic\_signal menu"> Specifying weather the created
      signal is periodic or not. If the signal is not periodic, the
      signal stays constant beyond {\bf t\_n}, otherwise it is clamped
      to {\bf y\_1} at {\bf t\_n}.</PARAM>
      <PARAM name="Standards/Functions menu"> Specifying Sine, Sawtooth,
      Pulse, and random signals.</PARAM>
      <PARAM name="Exit/Help menu"> a short help on the graphic window commands</PARAM>
      <PARAM name="Exit/Exit\_without\_save menu"> closing the graphical
      window, discarding all modifications in data.</PARAM>
      <PARAM name="Exit/Exit\_with\_save menu"> closing the graphical window
      and saving data points.</PARAM>
    </PARAMS>
    </PARAM>
  </PARAMS>

  <PARAMS name='Capacitor' type='XML'>
    <PARAM name="C (F)">
      Capacitance. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Initial Voltage">
      Initial Voltage. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='Constant' type='XML'>
    <PARAM name="k">
      Gain. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='ConstantVoltage' type='XML'>
    <PARAM name="V (volt)">
      Output voltage. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='Counter' type='XML'>
    <PARAM name="Minimum">
      The lowest number of the counter. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Maximum">
      The highest number of the counter. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Rule (1=Increment 2=Decrement)">
      The rule of counting. If it is 1 then the counter counts
      from the lower number to the higher number. the count in this
      case is increasing. otherwise, if the rule is equal to 2 the
      counter will decrease and it will count from the higher
      number to the lower one. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>


  <PARAMS name='DEADBAND' type='LATEX'>
    <!-- %End of dead band   0.5 -->
    <PARAM name="End of dead band">
      The upper limit of the dead band.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Start of dead band   -0.5 -->
    <PARAM name="Start of dead band">
      The lower limit of the dead band. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %zero crossing (0:no, 1:yes)   1 -->
    <PARAM name="zero crossing ">
      Select to enable zero crossing detection to
      detect when the limits are reached.   \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>


  <PARAMS name='DELAYV_f' type='XML'>
    <PARAM name="Number of inputs">
      Set the vector size of the first regular input and
      the vector size of the regular output port. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Register initial condition">
      Set the length and the initial conditions of the register. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Max delay">
      It defines the largest value the time delay input
      can have.The value cannot be negative. Properties: Type 'vec' of size 1.
      
    </PARAM>
  </PARAMS>

  <PARAMS name='DELAY_f' type='XML'>
    <PARAM name="Discretization time step">
      Set the time period of the integrated clock. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Register initial state">
      Set the length and the initial conditions of the register. Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='DEMUX' type='LATEX'>
    <!-- %number of output ports or vector of sizes   2 -->
    <PARAM name="number of output ports or vector of sizes">
      positive integer less than or equal to $8$.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
  </PARAMS>

  <PARAMS name='DEMUX_f' type='LATEX'>
    <!-- %number of output ports or vector of sizes   2 -->
    <PARAM name="number of output ports or vector of sizes">
      positive integer less than or equal to $8$.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
  </PARAMS>


  <PARAMS name='DIFF_c' type='XML'>
    <PARAM name="Initial state">
      Initial value of the state used as initial guess to help the
      solver to converge toward the solution. This is specially useful
      at the beginning of the simulation. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Initial Derivative">
      Initial value of the state derivatives used as initial guess to help the
      solver. The very first output of the block is the initial
      derivative vector. Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='DIFF_f' type='XML'>
    <PARAM name="Initial state">
      Initial value of the state used as initial guess to help the
      solver to converge toward the solution. This is specially useful
      at the beginning of the simulation. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Initial Derivative">
      Initial value of the state derivatives used as initial guess to help the
      solver. The very first output of the block is the initial
      derivative vector. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='DLR' type='LATEX'>
    <PARAM name="Numerator (z)">
      This parameter sets the numerator of the transfer function.\\
      This must be a polynomial in {\bf z}.\\
      Properties: Type 'pol' of size 1.
    </PARAM>
    <PARAM name="Denominator (z)">
      This parameter sets the denominator of the transfer function.\\
      This must be a polynomial in {\bf z}.\\
      Properties: Type 'pol' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='DLRADAPT_f' type='XML'>
    <PARAM name="Vector of p mesh points">
      Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Numerator roots (one line for each mesh)">
      Properties: Type 'mat' of size [-1,-1].
    </PARAM>
    <PARAM name="Denominator roots (one line for each mesh)">
      Properties: Type 'mat' of size [&gt;0, masse volumique imposée fu fluide: p_rho (kg/m3)">
      Fluid density. Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>


  <PARAMS name='PuitsP' type='XML'>
    <PARAM name="Pression de la source: P0 (Pa)">
      Pressure of the thermohydraulic source. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Temperature de la source: T0 (K)">
      Temperature of the thermohydraulic source. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Enthalpie spécifique de la source: H0 (J/kg)">
      Specific Enthaly of the thermohydraulic source. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="1:température fixée - 2:enthalpie fixée: option_temperature">
      Temperature option. 1: fixed temperature - 2: fixed enthalpy. Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='QUANT_f' type='LATEX'>
    <!-- %Step   0.1 -->
    <PARAM name="Step">
      scalar, Quantization step \\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %Quantization Type (1-4)   1 -->
    <PARAM name="Quantization Type">
      scalar with possible values 1,2,3 or 4
      \begin{description}
      \item[1] Round method
      \item[2] Truncation method
      \item[3] Floor method
      \item[4] Ceil method
      \end{description}
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='RAMP' type='LATEX'>
    <!-- %Slope   0 -->
    <PARAM name="Slope">
      The rate of change of the generated signal.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %Start time   0 -->
    <PARAM name="Start time">
      The time at which the signal begins to be generated.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %Initial output   0 -->
    <PARAM name="Initial output">
      The initial value of the signal. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='RAND_f' type='LATEX'>
    <PARAM name="flag">
      0 or 1.\\
      0 for uniform distribution on  [A,A+B]. \\
      1 for normal distribution.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="A">
      vector\\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="B">
      vector\\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="seed">
      scalar\\
      Seed value for a sequence of random number.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='RAND_m' type='LATEX'>
    <PARAM name="Datatype(1=real double  2=complex)">
      It indicates the type of the output. It support only the two
      types double (1) and complex (2). If we input another entry
      in this label Scicos will print the message
      "Datatype is not supported". \\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="flag">
      0 or 1.\\
      0 for uniform distribution on  [A,A+B]. \\
      1 for normal distribution.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="A">
      matrix\\
      Properties: Type 'mat' of size [-1,-2].
    </PARAM>
    <PARAM name="B">
      matrix\\
      Properties: Type 'mat' of size [-1,-2].
    </PARAM>
    <PARAM name="seed">
      matrix\\
      Seed value for a sequence of random number.\\
      First number is for the real part and the second for the
      imaginary part.\\
      Properties: Type 'mat' of size [1,2].
    </PARAM>
  </PARAMS>

  <PARAMS name='RATELIMITER' type='LATEX'>
    <!-- %max slope   1 -->
    <PARAM name="max slope">
      The limit of the derivative of an increasing input signal.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %min slope   -1 -->
    <PARAM name="min slope">
      The limit of the derivative of a decreasing input signal.\\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='READAU_f' type='LATEX'>
    <!-- %Input file name   test.au -->
    <PARAM name="Input file name">
      a character string defining the path of the file.\\
      Properties: Type 'str' of size 1
    </PARAM>
    <!-- %Buffer size   20 -->
    <PARAM name="Buffer size">
      To improve efficiency it is possible to buffer
      the input data.    Read on the file is only done after each  Buffer
      size call to the block.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Swap mode 0/1   0 -->
    <PARAM name="Swap mode 0/1">
      With  {\bf Swap mode=1} the file is supposed to be
      coded in "little endian IEEE format" and data are swaped if
      necessary to match the IEEE format of the processor.
      If {\bf Swap mode=0} then automatic bytes swap is disabled.\\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='READC_f' type='LATEX'>
    <!-- %Time record selection [] -->
    <PARAM name="Time record selection">
      an empty matrix or a positive integer.\\
      If an integer  i  is given the  i th element of the read
      record is assumed to be the date of the output event.\\
      If empty no output event exists.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Outputs record selection   1 -->
    <PARAM name="Outputs record selection">
      a vector of positive integer.\\
      $[k_1,\cdots,k_n]$ ,The  $k_i$ th element of the read
      record gives the value of  $i^{th}$ output.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Input file name   foo -->
    <PARAM name="Input file name">
      a character string defining the path of the file.\\
      Properties: Type 'str' of size 1
    </PARAM>
    <!-- %Input Format   d -->
    <PARAM name="Input Format">
      a character string defining the format to use.\\
      Properties: Type 'str' of size 1
    </PARAM>
    <!-- %Record size   1 -->
    <PARAM name="Record size">
      The file is supposed to be formed by a sequence of    data with same format. \\
      These data are organized in a sequence of record each    of them containing Record size data.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Buffer size (in records)   20 -->
    <PARAM name="Buffer size">
      To improve efficiency it is possible to buffer the input data.
      Read on the file is only done after each Buffer size call    to the block.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Initial record index   1 -->
    <PARAM name="Initial record index">
      a scalar. This fixes the first record of the file to use.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Swap mode 0/1   0 -->
    <PARAM name="Swap mode 0/1">
      With  {\bf Swap mode=1}  the file is supposed to be
      coded in "little endian IEEE format" and data are swaped if
      necessary to match the IEEE format of the processor.
      If {\bf Swap mode=0} then automatic bytes swap is disabled.\\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='REGISTER' type='LATEX'>
    <!-- %Register initial condition   0;0;0;0;0;0;0;0;0;0 -->
    <PARAM name="Register initial condition">
      A column vector. It contains the initial state of the register.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <PARAM name="Datatype">
      This block support all datatypes besides complex.\\
      Properties: Type 'vec' of size -1
    </PARAM>
  </PARAMS>

  <PARAMS name='REGISTER_f' type='LATEX'>
    <!-- %Register initial condition   0;0;0;0;0;0;0;0;0;0 -->
    <PARAM name="Register initial condition">
      A column vector. It contains the initial state of the register.\\
      Properties: Type 'vec' of size -1
    </PARAM>
  </PARAMS>

  <PARAMS name='RELATIONALOP' type='LATEX'>
    <!-- %Operator: == (0), ~= (1), $&lt;$ (2), $&lt;$= (3), $&gt;$= (4), $&gt;$ (5)   2 -->
    <PARAM name="Operator: ">
      Designate the relational operator used to
      compare the two inputs.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Use zero crossing (no: 0), (yes: 1)   0 -->
    <PARAM name="Use zero crossing ">
      Select to enable zero crossing detection. \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='RELAY_f' type='LATEX'>
    <!-- %number of inputs   2 -->
    <PARAM name="number of inputs">
      a scalar. Number of regular and event inputs. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %initial connected input   1 -->
    <PARAM name="initial connected input">
      an integer. It must be between 1 and
      the number of inputs.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='RPARAMS' type='LATEX'>
    <!-- %Time record selection   [] -->
    <PARAM name="Time record selection">
      an empty matrix or a positive integer. \\
      If an integer {\bf i} is given the {\bf i} th element of the read
      record is assumed to be the date of the output event.
      If empty no output event exists.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
    <!-- %Outputs record selection   1 -->
    <PARAM name="Outputs record selection">
      a vector of positive integer.\\
      {\bf [k1,...,kn]}. The {\bf ki} th element of the read
      record gives the value of  i th output.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
    <!-- %Input file name   foo -->
    <PARAM name="Input file name">
      a character string defining the path of the file.\\
      Properties: Type 'str' of size 1.
    </PARAM>
    <!-- %Input Format   (7(e10.3,1x)) -->
    <PARAM name="Input Format">
      a character string defining the Fortran format
      to use or nothing for an unformatted (binary) write. If given, the
      format must began by a left parenthesis and end by a right
      parenthesis. example: {\bf (e10.3)}.\\
      Properties: Type 'str' of size 1.
    </PARAM>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      To improve efficiency it is possible to buffer
      the input data. read on the file is only done after each
      {\bf Buffer size}  call to the block.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='RPARAMS_f' type='LATEX'>
    <!-- %Time record selection   [] -->
    <PARAM name="Time record selection">
      an empty matrix or a positive integer. \\
      If an integer {\bf i} is given the {\bf i} th element of the read
      record is assumed to be the date of the output event.
      If empty no output event exists.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
    <!-- %Outputs record selection   1 -->
    <PARAM name="Outputs record selection">
      a vector of positive integer.\\
      {\bf [k1,...,kn]}. The {\bf ki} th element of the read
      record gives the value of  i th output.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
    <!-- %Input file name   foo -->
    <PARAM name="Input file name">
      a character string defining the path of the file.\\
      Properties: Type 'str' of size 1.
    </PARAM>
    <!-- %Input Format   (7(e10.3,1x)) -->
    <PARAM name="Input Format">
      a character string defining the Fortran format
      to use or nothing for an unformatted (binary) write. If given, the
      format must began by a left parenthesis and end by a right
      parenthesis. example: {\bf (e10.3)}.\\
      Properties: Type 'str' of size 1.
    </PARAM>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      To improve efficiency it is possible to buffer
      the input data. read on the file is only done after each
      {\bf Buffer size}  call to the block.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='RICC' type='XML'>
    <PARAM name="Type (1=Cont  2=Disc)">
      For continuous time signal set this parameter to 1.
      For discrete input time set it to 2. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Model(1=Schr  2=sign(cont) inv(disc))">
      To use the Shur method in computation set this parameter to 1.
      To use matrix sign function approach in continuous case or
      the inverse free spectral decomposition method in discrete
      case set this parameter to 2. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='ROOTCOEF' type='XML'>
    <PARAM name="Datatype(1=real double  2=Complex)">
      This block can only support double inputs values.
      These values can be real or complex. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="input row size">
      The input row size. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='Resistor' type='XML'>
    <PARAM name="R (ohm)">
      Resistance. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SAMPHOLD_m' type='XML'>
    <PARAM name="Datatype(-1=inherit 1=real double 2=Complex 3=int32 ...)">
      Output datatype. This block can support all data types. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>



  <PARAMS name='SATURATION' type='LATEX'>
    <!-- %Upper limit   1 -->
    <PARAM name="Upper limit">
      Specify the upper bound on the input signal. When
      the input signal to the Saturation block is above this value, the
      output of the block is clipped to this value. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Lower limit   -1 -->
    <PARAM name="Lower limit">
      Specify the lower bound on the input signal. When
      the input signal to the Saturation block is below this value, the
      output of the block is clipped to this value. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %zero crossing (0:no, 1:yes)   1 -->
    <PARAM name="zero crossing ">
      Select to enable zero crossing detection.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='SAT_f' type='XML'>
    <PARAM name="Min">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Max">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Slope">
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SCALAR2VECTOR' type='LATEX'>
    <!-- %size of output (-1: if don't know)   -1 -->
    <PARAM name="size of output">
      Number of component in vector output.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SELECT_f' type='LATEX'>
    <!-- %number of inputs   2 -->
    <PARAM name="number of inputs">
      a scalar. Number of regular and event inputs. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %initial connected input   1 -->
    <PARAM name="initial connected input">
      an integer. It must be between 1 and
      the number of inputs.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='SELECT_m' type='LATEX'>
    <PARAM name="Datatype(1= real double  2=Complex)">
      It indicates the type of the output. It support only the two
      types double (1) and complex (2). If we input another entry
      in this label Scicos will print the message
      "Datatype is not supported". \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %number of inputs   2 -->
    <PARAM name="number of inputs">
      a scalar. Number of regular and event inputs. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %initial connected input   1 -->
    <PARAM name="initial connected input">
      an integer. It must be between 1 and
      the number of inputs.  \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='SENSOR_f' type='XML'>
    <PARAM name="Output Size">
      Set the size of the regular output port. Properties: Type 'mat' of size [1,2].
    </PARAM>
    <PARAM name="Output Type">
      Set the type of the regular output port. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Sensor number">
      An integer defining the port number. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SHIFT' type='XML'>
    <PARAM name="Datatype (3=int32  4=int16 5=int8 ...)">
      It indicates the type of the input/output data.
      It support all the integer datatype, number must be
      between 3 and 8. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Number of bits to shift left (use negative number to shift right)">
      It indicates the number of bits the input signal is shifted.
      A positive value indicates a shift left, negative values
      indicates shift right. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Shifttype(0=Arithmetic 1=Circular)">
      It indicate the rule used to shift the bits. It can be
      arithmetic or circular. When the Shifttype is normal, an
      arithmetic shift is applied to the input signal. In this
      case, the bits that are shifted. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SIGNUM' type='LATEX'>
    <!-- %use zero\_crossing (1: yes) (0:no)   1 -->
    <PARAM name="use zero\_crossing ">
      Select to enable zero crossing detection. \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='SLIDER_f' type='XML'>
    <PARAM name="Min range">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Max range">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Type">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Color">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Block inherits (1) or not (0)">
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>


  <PARAMS name='SQRT' type='XML'>
    <PARAM name="Datatype(1=real double  2=Complex)">
      It indicates the type of the output. It support only the two
      types double (1) and complex (2). If we input another entry
      in this label Scicos will print the message
      "Datatype is not supported". Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SRFLIPFLOP' type='XML'>
    <PARAM name="Initial Value">
      Initial Value of the state Q. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='STEP' type='LATEX'>
    <!-- %Step time   1 -->
    <PARAM name="Step time">
      The time, in seconds, when the output jumps from the
      Initial value parameter to the Final value parameter.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %Initial value   0 -->
    <PARAM name="Initial value">
      The block output until the simulation time
      reaches the Step time parameter.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
    <!-- %Final value   1 -->
    <PARAM name="Final value">
      The block output when the simulation time reaches
      and exceeds the Step time parameter.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='STEP_FUNCTION' type='LATEX'>
    <!-- %Step time   1 -->
    <PARAM name="Step time">
      The time, in seconds, when the output jumps from the
      Initial value parameter to the Final value parameter.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %Initial value   0 -->
    <PARAM name="Initial value">
      The block output until the simulation time
      reaches the Step time parameter.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
    <!-- %Final value   1 -->
    <PARAM name="Final value">
      The block output when the simulation time reaches
      and exceeds the Step time parameter.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SUBMAT' type='XML'>
    <PARAM name="Datatype (1=real double  2=Complex)">
      Type of the output matrix. It can be double or complex. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Starting Row Index">
      The first row of the submatrix. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Ending Row Index">
      The last row of the Submatrix. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Starting Column Index">
      The first column of the submatrix. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Ending Column Index">
      The last row of the submatrix. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Input Dimension">
      The Matrix input dimensions. Properties: Type 'vec' of size 2.
    </PARAM>
  </PARAMS>

  <PARAMS name='SUMMATION' type='XML'>
    <PARAM name="Datatype (-1=inherit 1=real double 2=complex 3=int32 ...)">
      It indicates the type of the input/output data. It support
      all datatype, number must be between 1 and 8.
      Negative number is also allowed for inherited data type. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Number of inputs or sign vector (of +1, -1)">
      It indicates the number of inputs and the operation see the
      description for more detail. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Do on Overflow(0=Nothing 1=Saturate 2=Error)">
      When this parameter is set to zero the result is similar to
      a normal summation of two integer matrix. When it is set to 1,
      on overflow the block saturate the result. When it is set to
      2, on overflow an error message box appears. If the Data type
      is double or complex this parameter is not used. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SWITCH2' type='LATEX'>
    <!-- %pass first input if: u2$&gt;$=a (0), u2$&gt;$a (1), u2~=a (2)   0 -->
    <PARAM name="pass first input if: u2$&gt;$=a ">
      Select the conditions under
      which the first input is passed. You can make the block check
      whether the control input is greater than or equal to the
      threshold value, purely greater than the threshold value, or
      nonzero. If the	control input meets the condition set in this
      parameter, then the first input is passed. Otherwise, the third
      input is passed. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %threshold a   0 -->
    <PARAM name="threshold a">
      Assign the switch threshold that determines which
      input is passed to the output. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %use zero crossing: yes (1), no (0)   1 -->
    <PARAM name="use zero crossing: yes ">
      Select to enable zero crossing detection. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SWITCH2_m' type='LATEX'>
    <PARAM name="Datatype(1= real double  2=Complex)">
      a scalar. Give the datatype of the inputs/output. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %pass first input if: u2$&gt;$=a (0), u2$&gt;$a (1), u2~=a (2)   0 -->
    <PARAM name="pass first input if: u2$&gt;$=a ">
      Select the conditions under
      which the first input is passed. You can make the block check
      whether the control input is greater than or equal to the
      threshold value, purely greater than the threshold value, or
      nonzero. If the	control input meets the condition set in this
      parameter, then the first input is passed. Otherwise, the
      third input is passed. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %threshold a   0 -->
    <PARAM name="threshold a">
      Assign the switch threshold that determines which
      input is passed to the output. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %use zero crossing: yes (1), no (0)   1 -->
    <PARAM name="use zero crossing: yes ">
      Select to enable zero crossing detection. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SWITCH2_s' type='LATEX'>
    <PARAM name="Datatype(-1=inherit 1=real double  2=Complex...)">
      a scalar. Give the datatype of the inputs/output. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %pass first input if: u2$&gt;$=a (0), u2$&gt;$a (1), u2~=a (2)   0 -->
    <PARAM name="pass first input if: u2$&gt;$=a ">
      Select the conditions under
      which the first input is passed. You can make the block check
      whether the control input is greater than or equal to the
      threshold value, purely greater than the threshold value, or
      nonzero. If the	control input meets the condition set in this
      parameter, then the first input is passed. Otherwise, the
      third input is passed. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %threshold a   0 -->
    <PARAM name="threshold a">
      Assign the switch threshold that determines which
      input is passed to the output. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %use zero crossing: yes (1), no (0)   1 -->
    <PARAM name="use zero crossing: yes ">
      Select to enable zero crossing detection. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SWITCH_f' type='LATEX'>
    <!-- %number of inputs   2 -->
    <PARAM name="number of inputs">
      Specify the number of data inputs to the block.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %connected input   1 -->
    <PARAM name="connected input">
      an integer. It must be between 1 and  the
      number of inputs. \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='SampleCLK' type='XML'>
    <PARAM name="Sample time">
      The Sample time value. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Offset">
      The offset value. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SecondOrder' type='XML'>
    <PARAM name="k">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="w">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="D">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="y_start">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="yd_start">
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='Sensor' type='XML'>
    <PARAM name="k">
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SetString' type='XML'>
    <PARAM name="str">
     : the scilab string to convert in ascii code.
    </PARAM>
    <PARAM name="myint8">
     : ascii code corresponding to the input string.
      The result is put in an int8 vector.
    </PARAM>
  </PARAMS>

  <PARAMS name='Sigbuilder' type='LATEX'>
    The parameters of  Sigbuilder block is the same as
    that of \htmladdnormallink{CURVE\_c}{CURVE_c.htm} block.
  </PARAMS>

  <PARAMS name='Sine' type='XML'>
    <PARAM name="amplitude">
      Amplitude of sine wave. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="freqHz">
      Frequency of sine wave. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="phase">
      Phase of sine wave. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="offset">
      Offset of output signal. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="startTime">
      Output = offset for time lower than or equal to startTime. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SineTF' type='XML'>
    <PARAM name="phase">
      This parameter is constant and added to the input variable (unit [rad]). Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SineVoltage' type='XML'>
    <PARAM name="Amplitude (Volt)">
      Sine voltage amplitude. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="phase (rad)">
      phase shift of the sine voltage. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Frequency (Hz)">
      Sine voltage frequency. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Voltageoffset (V)">
      Offset Voltage of the sine voltage. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Timeoffset (s)">
      Start time. During the start time, the signal value is
      equal to the voltage offset. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='SourceP' type='XML'>
    <PARAM name="Pression de la source: P0 (Pa)">
      Pressure of the thermohydraulic source. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Temperature de la source: T0 (K)">
      Temperature of the thermohydraulic source. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Enthalpie spécifique de la source: H0 (J/kg)">
      Specific enthalpie of  the thermohydraulic source. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="1:température fixée - 2:enthalpie fixée: option_temperature">
      Temperature option. 1: fixed temperature - 2: fixed enthalpy. Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='Switch' type='XML'>
    <PARAM name="Resistance in On state (Ohm)">
      Switch resistance when the Switch is closedProperties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Resistance in Off state (Ohm)">
      Switch  resistance when the switch is open. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>
  
  <PARAMS name='TCLSS' type='LATEX'>
    <!-- %A matrix   -1 -->
    <PARAM name="A matrix">
      A square matrix. \\
      Properties: Type 'mat' of size [-1,-1].
    </PARAM>
    <!-- %B matrix   1 -->
    <PARAM name="B matrix">
      The {\bf B} matrix,  []  if system has no input.\\
      Properties: Type 'mat' of size ["size(\%1,2)","-1"].
    </PARAM>
    <!-- %C matrix   1 -->
    <PARAM name="C matrix">
      The  {\bf C}  matrix ,  []  if system has no output.\\
      Properties: Type 'mat' of size ["-1","size(\%1,2)"].
    </PARAM>
    <!-- %D matrix   0 -->
    <PARAM name="D matrix">
      The {\bf D}  matrix,  []  if system has no  D  term.\\
      Properties: Type 'mat' of size [-1,-1].
    </PARAM>
    <!-- %Initial state   0 -->
    <PARAM name="Initial state">
      A vector/scalar initial state of the system.\\
      Properties: Type 'vec' of size "size(\%1,2)".
    </PARAM>
  </PARAMS>

  <PARAMS name='TCLSS_f' type='LATEX'>
    <!-- %A matrix   -1 -->
    <PARAM name="A matrix">
      A square matrix. \\
      Properties: Type 'mat' of size [-1,-1].
    </PARAM>
    <!-- %B matrix   1 -->
    <PARAM name="B matrix">
      The {\bf B} matrix,  []  if system has no input.\\
      Properties: Type 'mat' of size ["size(\%1,2)","-1"].
    </PARAM>
    <!-- %C matrix   1 -->
    <PARAM name="C matrix">
      The  {\bf C}  matrix ,  []  if system has no output.\\
      Properties: Type 'mat' of size ["-1","size(\%1,2)"].
    </PARAM>
    <!-- %D matrix   0 -->
    <PARAM name="D matrix">
      The {\bf D}  matrix,  []  if system has no  D  term.\\
      Properties: Type 'mat' of size [-1,-1].
    </PARAM>
    <!-- %Initial state   0 -->
    <PARAM name="Initial state">
      A vector/scalar initial state of the system.\\
      Properties: Type 'vec' of size "size(\%1,2)".
    </PARAM>
  </PARAMS>

  <PARAMS name='TEXT_f' type='LATEX'>
    <!-- %Text   Text -->
    <PARAM name="Text">
      a character string, Text to be displayed \\
      Properties: Type 'str' of size -1
    </PARAM>
    <!-- %Font number   2 -->
    <PARAM name="Font number">
      a positive integer less than 6, number of
      selected font (see {\bf xset})  \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Font size   1 -->
    <PARAM name="Font size">
      a positive integer, selected font size (see {\bf xset}). \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='TIME_DELAY' type='LATEX'>
    <!-- %Delay   1 -->
    <PARAM name="Delay">
      The amount of simulation time that the input signal is
      delayed before being propagated to the output. The value must be
      nonnegative. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %initial input   0 -->
    <PARAM name="initial input">
      The output generated by the block between the
      start of the simulation and the Time delay. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Buffer size   1024 -->
    <PARAM name="Buffer size">
      The initial memory allocation for the number of
      points to store. \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='TKSCALE' type='XML'>
    <PARAM name="Min value">
      An integer specifying the min value in the range of the scale. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Max value">
      An integer specifying the max value in the range of the scale. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Normalization">
      The output of the block is the integer value specified by the slider (an
      integer between Min value and the Max value) divided by this Normalization factor. Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='TOWS_c' type='XML'>
    <PARAM name="Size of buffer">
      Set the size of the input buffer. That gives
      the total number of samples recorded during the
      simulation.That buffer is a circulate buffer. Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Scilab variable name">
      Set the name of the Scilab variable.
      This must be a valid variable name.The simulation must be finished to retrieve
      that variable in the Scilab workspace. Properties: Type 'str' of size 1.
    </PARAM>
    <PARAM name="Inherit (no:0, yes:1)">
      Options to choose event inheritance from
      regular input or from explicit event input (0). Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='TrigFun' type='LATEX'>
    <!-- %Function   sin -->
    <PARAM name="Function">
      The trigonometric function.\\
      Properties: Type 'str' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='VARIABLE_DELAY' type='LATEX'>
    <!-- %Max delay   1 -->
    <PARAM name="Max delay">
      It defines the largest value the time delay input
      can have.The value cannot be negative.   \\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %initial input   0 -->
    <PARAM name="initial input">
      The output generated by the block until the
      simulation time first exceeds the time delay input. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %Buffer size   1024 -->
    <PARAM name="Buffer size">
      The number of points the block can store. \\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='VVsourceAC' type='XML'>
    <PARAM name="Frequency (Hz)">
      Frequency of the output sinosoid voltage. Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='VanneReglante' type='XML'>
    <PARAM name="Cvmax">
      Cvmax (maximum opening of the valve). Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="p_rho">
      Fluid density. Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>


  <PARAMS name='VsourceAC' type='XML'>
    <PARAM name="Amplitude (Volt)">
      Amplitude of the  output sinusoid voltage. Properties: Type 'vec' of size -1.
    </PARAM>
    <PARAM name="Frequency (Hz)">
      Frequency of the output sinusoid voltage. Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='WPARAMS' type='LATEX'>
    <!-- %Input size   1 -->
    <PARAM name="Input size">
      a scalar. This fixes the input size.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %Output file name   foo -->
    <PARAM name="Output file name">
      a character string defining the path of the file.\\
      Properties: Type 'str' of size 1.
    </PARAM>
    <!-- %Ouput Format   (7(e10.3,1x)) -->
    <PARAM name="Output Format">
      a character string defining the Fortran format
      to use or nothing for an unformatted (binary) write. If given, the
      format must began by a left parenthesis and end by a right
      parenthesis. example: {\bf (e10.3)}.\\
      Properties: Type 'str' of size 1.
    </PARAM>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      To improve efficiency it is possible to buffer
      the input data. Write on the file is only done after each    {\bf Buffer size} call to the block.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='WPARAMS_f' type='LATEX'>
    <!-- %Input size   1 -->
    <PARAM name="Input size">
      a scalar. This fixes the input size.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
    <!-- %Output file name   foo -->
    <PARAM name="Output file name">
      a character string defining the path of the file.\\
      Properties: Type 'str' of size 1.
    </PARAM>
    <!-- %Ouput Format   (7(e10.3,1x)) -->
    <PARAM name="Output Format">
      a character string defining the Fortran format
      to use or nothing for an unformatted (binary) write. If given, the
      format must began by a left parenthesis and end by a right
      parenthesis. example: {\bf (e10.3)}.\\
      Properties: Type 'str' of size 1.
    </PARAM>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      To improve efficiency it is possible to buffer
      the input data. Write on the file is only done after each    {\bf Buffer size} call to the block.\\
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='WRITEAU_f' type='LATEX'>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      To improve efficiency it is possible to buffer
      the input data. read on the file is only done after each  Buffer
      size call to the block.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Swap mode 0/1   0 -->
    <PARAM name="Swap mode 0/1">
      With  {\bf Swap mode=1}  the file is supposed to be
      coded in "little endian IEEE format" and data are swaped if
      necessary to match the IEEE format of the processor. If  {\bf Swap
      mode=0} then automatic bytes swap is disabled.\\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='WRITEC_f' type='LATEX'>
    <!-- %Input size   1 -->
    <PARAM name="Input size">
      a scalar, the size of the input.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Output file name   foo -->
    <PARAM name="Output file name">
      a character string defining the output file name.\\
      Properties: Type 'str' of size 1
    </PARAM>
    <!-- %Output Format   c -->
    <PARAM name="Output Format">
      a character string defining the format to use.\\
      Properties: Type 'str' of size 1
    </PARAM>
    <!-- %Buffer size   2 -->
    <PARAM name="Buffer size">
      To improve efficiency it is possible to buffer the
      input data. read on the file is only done after each {\bf Buffer
      size} call to the block.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Swap mode 0/1   0 -->
    <PARAM name="Swap mode 0/1">
      With {\bf Swap mode=1} the file is supposed to be
      coded in ``little endian IEEE format'' and data are swaped if
      necessary to match the IEEE format of the processor.
      If {\bf Swap mode=0} then automatic bytes swap is disabled.\\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='WhileIterator' type='XML'>
    <PARAM name="Number of Iteration (-1: unlimited)">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="While type (1=while 0=do while)">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="State when starting (0=held 1=reset)">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Show iteration variable(0=No 1=Yes)">
      Properties: Type 'vec' of size 1.
    </PARAM>
    <PARAM name="Iteration Datatype (1=Double 3=int32 4=int16 5=int8)">
      Properties: Type 'vec' of size 1.
    </PARAM>
  </PARAMS>

  <PARAMS name='ZCROSS_f' type='LATEX'>
    <!-- %Input size   1 -->
    <PARAM name="Input size">
      a positive integer. \\
      Property: Type 'vec' of size 1.
    </PARAM> 
  </PARAMS>

  <PARAMS name='add_palette' type='LATEX'>
    <PARAM name="Title">
      The name of the palette.
    </PARAM>
    <PARAM name="path">
      The path of the palette.
    </PARAM>
  </PARAMS>

  <PARAMS name='buildouttb' type='XML'>
    <PARAM name="outtb">
      a list of size n.
    </PARAM>
    <PARAM name="lnksz">
      That parameter gives the size of Scilab object in outtb.This matrix of integer or real numbers can have a
      n,2 or 2,n size.
    </PARAM>
    <PARAM name="lnktyp">
      That parameters gives the type of Scilab object in outtb:1: double2: complex3: int324: int165
     : int86: uint327: uint168: uint8else: double
      This matrix of integer or real numbers can have a n,1 or 1,n size.
    </PARAM>
  </PARAMS>

  <PARAMS name='c_block' type='LATEX'>
    <!-- %input ports sizes   1 -->
    <PARAM name="input ports sizes">
      Number of regular input ports.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
    <!-- %output port sizes   1 -->
    <PARAM name="output port sizes">
      Number of regular output ports.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
    <!-- %System parameters vector   [] -->
    <PARAM name="System parameters vector">
      Number of parameters that this
      function accepts. \\
      Properties: Type 'vec' of size -1.
    </PARAM>
    <!-- %function name   toto -->
    <PARAM name="function name">
      Name of the function to be generated.\\
      Properties: Type 'str' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='callblk' type='XML'>
    <PARAM name="blk">
      scicos_block scilab structure
    </PARAM>
    <PARAM name="flag">
      computational function calling flag
    </PARAM>
    <PARAM name="time">
      simulator time
    </PARAM>
  </PARAMS>

  <PARAMS name='coserror' type='XML'>
    <PARAM name="errmsg">
      a string that gives the error message to be displayed for the user
    </PARAM>
  </PARAMS>

  <PARAMS name='create_gif' type='XML'>
    <PARAM name="TXT">
      a vector of strins that gives the path and name of the Scicos blocks interfacing function.
    </PARAM>
    <PARAM name="path">
      the target path for the gif icons
    </PARAM>
  </PARAMS>

  <PARAMS name='create_palette' type='XML'>
    <PARAM name="Path">
      a string given the directory path that contains Scicos blocks interfacing functions.
    </PARAM>
    <PARAM name="routines">
      a vector of strings that contains names of computational functions used in scicos blocks.
    </PARAM>
    <PARAM name="IntFunc">
      a vector of strings that contains names of interfacing functions used in scicos blocks.
    </PARAM>
  </PARAMS>

  <PARAMS name='curblock' type='XML'>
    <PARAM name="blk">
      the current block number in the compiled structure.
    </PARAM>
  </PARAMS>

  <PARAMS name='data2sig' type='XML'>
    <PARAM name="A">
      vector,matrix or hypermatrix(with 3 dimensions)
      of real/complex or integers numbers.
    </PARAM>
    <PARAM name="step">
      an optional argument that gives the time step
      for the output time field.
      If not given, then the time step is 1.
    </PARAM>
    <PARAM name="B">
      a scilab structure that defines a signal:
      <PARAM   name="B.values">
	A input.
      </PARAM>
      <PARAM   name="B.time">
	the samples time in the form of
	a columun vector. The size of that
	vector is given by the A input.
      </PARAM>
    </PARAM>
  </PARAMS>

  <PARAMS name='fortran_block' type='LATEX'>
    <!-- %input ports sizes   1 -->
    <PARAM name="input ports sizes">
      Number of regular input ports.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
    <!-- %output port sizes   1 -->
    <PARAM name="output port sizes">
      Number of regular output ports.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
    <!-- %System parameters vector   [] -->
    <PARAM name="System parameters vector">
      Number of parameters that this
      function accepts. \\
      Properties: Type 'vec' of size -1.
    </PARAM>
    <!-- %function name   forty -->
    <PARAM name="function name">
      Name of the function to be generated.\\
      Properties: Type 'vec' of size -1.
    </PARAM>
  </PARAMS>

  <PARAMS name='freq_div' type='LATEX'> 
    <!-- %Phase (0 to division factor -1)   0 -->
    <PARAM name="Phase ">
      positive scalar.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %Division factor   3 -->
    <PARAM name="Division factor">
      an integer greater than 1.\\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='generic_block' type='LATEX'>
    <!-- %simulation function   sinblk -->
    <PARAM name="simulation function">
      Name of the function to be loaded.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %function type (0,1,2,..)   1 -->
    <PARAM name="function type ">
      Type of the computational function supported
      by  Scicos.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %input ports sizes   1 -->
    <PARAM name="input ports sizes">
      Number of regular input ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output port sizes   1 -->
    <PARAM name="output port sizes">
      Number of regular input ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %input event ports sizes   [] -->
    <PARAM name="input event ports sizes">
      a vector of ones, size of event input
      ports. The size of the vector gives the number of event
      input ports.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output events ports sizes   [] -->
    <PARAM name="output events ports sizes">
      a vector of ones, size of event
      output ports. The size of the vector gives the number of of event
      output ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial continuous state   [] -->
    <PARAM name="initial continuous state">
      A column vector of Initial State
      Conditions.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial discrete state   [] -->
    <PARAM name="initial discrete state">
      A column vector Initial discrete  Conditions.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Real parameters vector   [] -->
    <PARAM name="Real parameters vector">
      column vector. Any parameters used    in the block can be defined here as a column vector.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Integer parameters vector   [] -->
    <PARAM name="Integer parameters vector">
      column vector. Any integer
      parameters used in the block can be defined here as a column
      vector. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial firing vector ($&lt;$0 for no firing)   [] -->
    <PARAM name="initial firing vector ">
      vector. Size of this vector corresponds
      to the number of event outputs. The value of the i-th entry
      specifies the time of the preprogrammed event firing on the i-th
      output event port. If less than zero, no event is preprogrammed.\\
      Properties: Type 'vec' of size sum(\%6)
    </PARAM>
    <!-- %direct feedthrough (y or n)   y -->
    <PARAM name="direct feedthrough ">
      character "y" or "n", specifies if block
      has a direct input to output feedthrough. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %time dependence (y or n)   n -->
    <PARAM name="time dependence ">
      Time dependance: character "y" or "n",
      specifies if block output depends explicitly on time. \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='generic_block2' type='LATEX'>
    <!-- %simulation function   sinblk -->
    <PARAM name="simulation function">
      Name of the function to be loaded.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %function type (0,1,2,..)   1 -->
    <PARAM name="function type ">
      Type of the computational function supported
      by  Scicos.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %input ports sizes   1 -->
    <PARAM name="input ports sizes">
      Number of regular input ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output port sizes   1 -->
    <PARAM name="output port sizes">
      Number of regular input ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %input event ports sizes   [] -->
    <PARAM name="input event ports sizes">
      a vector of ones, size of event input
      ports. The size of the vector gives the number of event
      input ports.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output events ports sizes   [] -->
    <PARAM name="output events ports sizes">
      a vector of ones, size of event
      output ports. The size of the vector gives the number of of event
      output ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial continuous state   [] -->
    <PARAM name="initial continuous state">
      A column vector of Initial State
      Conditions.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial discrete state   [] -->
    <PARAM name="initial discrete state">
      A column vector Initial discrete  Conditions.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Real parameters vector   [] -->
    <PARAM name="Real parameters vector">
      column vector. Any parameters used    in the block can be defined here as a column vector.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Integer parameters vector   [] -->
    <PARAM name="Integer parameters vector">
      column vector. Any integer
      parameters used in the block can be defined here as a column
      vector. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %number of modes   0 -->
    <PARAM name="number of modes">
      Number of Right hand side functions in the
      system. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %number of zero\_crossings   0 -->
    <PARAM name="number of zero\_crossings">
      No. of zero-crossings\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %initial firing vector ($&lt;$0 for no firing)   [] -->
    <PARAM name="initial firing vector ">
      vector. Size of this vector corresponds
      to the number of event outputs. The value of the i-th entry
      specifies the time of the preprogrammed event firing on the i-th
      output event port. If less than zero, no event is preprogrammed.\\
      Properties: Type 'vec' of size sum(\%6)
    </PARAM>
    <!-- %direct feedthrough (y or n)   y -->
    <PARAM name="direct feedthrough ">
      character "y" or "n", specifies if block
      has a direct input to output feedthrough. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %time dependence (y or n)   n -->
    <PARAM name="time dependence ">
      Time dependance: character "y" or "n",
      specifies if block output depends explicitly on time. \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='generic_block3' type='LATEX'>
    <!-- %simulation function   sinblk -->
    <PARAM name="Simulation function">
      Name of the function to be loaded.\\
      Properties: Type 'str' of size 1
    </PARAM>
    <!-- %function type (0,1,2,..)   1 -->
    <PARAM name="Function type ">
      Type of the computational function supported
      by  Scicos.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %input ports sizes   1 -->
    <PARAM name="Input ports sizes">
      Number and size of regular input ports. \\
      Properties: Type 'mat' of size [-1,2]
    </PARAM>
    <!-- %input ports type   1 -->
    <PARAM name="Input ports type">
      Set the datatype of the regular input ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output port sizes   1 -->
    <PARAM name="Output port sizes">
      Number and size of regular output ports. \\
      Properties: Type 'mat' of size [-1,2]
    </PARAM>
    <!-- %output ports type   1 -->
    <PARAM name="Output ports type">
      Set the datatype of the regular output ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %input event ports sizes   [] -->
    <PARAM name="Input event ports sizes">
      a vector of ones, size of event input
      ports. The size of the vector gives the number of event
      input ports.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output events ports sizes   [] -->
    <PARAM name="Output events ports sizes">
      a vector of ones, size of event
      output ports. The size of the vector gives the number of of event
      output ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial continuous state   [] -->
    <PARAM name="Initial continuous state">
      A column vector of Initial State
      Conditions.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial discrete state   [] -->
    <PARAM name="Initial discrete state">
      A column vector Initial discrete  Conditions.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial object state list() -->
    <PARAM name="Initial object state">
      A Scilab list that defines the initial object state (oz).\\
      Properties: Type 'lis' of size -1
    </PARAM>
    <!-- %Real parameters vector   [] -->
    <PARAM name="Real parameters vector">
      column vector. Any parameters used    in the block can be defined here as a column vector.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Integer parameters vector   [] -->
    <PARAM name="Integer parameters vector">
      column vector. Any integer
      parameters used in the block can be defined here as a column
      vector. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %object parameters list  list() -->
    <PARAM name="Object parameters list  ">
      A Scilab list that defines the list of    the Object parameters (opar).\\
      Properties: Type 'lis' of size -1
    </PARAM>
    <!-- %number of modes   0 -->
    <PARAM name="Number of modes">
      Number of Right hand side functions in the
      system. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %number of zero\_crossings   0 -->
    <PARAM name="Number of zero\_crossings">
      Number of zero-crossing surfaces.\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %initial firing vector ($&lt;$0 for no firing)   [] -->
    <PARAM name="Initial firing vector ">
      vector. Size of this vector corresponds
      to the number of event outputs. The value of the i-th entry
      specifies the time of the preprogrammed event firing on the i-th
      output event port. If less than zero, no event is preprogrammed.\\
      Properties: Type 'vec' of size sum(\%6)
    </PARAM>
    <!-- %direct feedthrough (y or n)   y -->
    <PARAM name="Direct feedthrough ">
      character "y" or "n", specifies if block
      has a direct input to output feedthrough. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %time dependence (y or n)   n -->
    <PARAM name="Time dependence ">
      Time dependance: character "y" or "n",
      specifies if block output depends explicitly on time. \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='get_scicos_version' type='XML'>
    <PARAM name="scicos_ver">
      a string given the current number version of Scicos.
    </PARAM>
  </PARAMS>

  <PARAMS name='getblocklabel' type='XML'>
    <PARAM name="blk">
      Integer parameter. Set the index of a block
      (in the compiled structure).
    </PARAM>
    <PARAM name="label">
      String parameter. Gives the string of the label of the
      block numbered blk.
    </PARAM>
  </PARAMS>

  <PARAMS name='getscicosparam' type='XML'>
    <PARAM name="fic">
     : path+name of the data file.
    </PARAM>
    <PARAM name="dt">
     : a list that encloses the name and the values
      of the scicos variables enclosed in the parameters
      file.
    </PARAM>
    <PARAM name="data">
     : a string matrix that gives the name, dimensions
      and type of Scicos variables enclosed in the
      parameters file.
      
    </PARAM>
  </PARAMS>

  <PARAMS name='getscicosvars' type='XML'>
    <PARAM name="str,str1,str2,...">
      That parameter can be a string or a matrix of string.
      The following entries are allowed:
      <PARAMS>
	<PARAM name="x" > get the continuous state register.</PARAM>
	<PARAM name="nx" > get the length of the continuous state register.</PARAM>
	<PARAM name="xptr" > get the pointers register of the continuous state register.</PARAM>
	<PARAM name="zcptr" > get the pointers register of the zero-crossing surfaces register.</PARAM>
	<PARAM name="z" > get the discrete state register.</PARAM>
	<PARAM name="nz" > get the length of the continuous state register.</PARAM>
	<PARAM name="zptr" > get the pointers register of the discrete state register.</PARAM>
	<PARAM name="noz" > get the number of elements of the discrete object state list.</PARAM>
	<PARAM name="oz" > get the discrete object state list.</PARAM>
	<PARAM name="ozsz" > get the size of the elements of the discrete object state list.</PARAM>
	<PARAM name="oztyp" > get the type of the elements of the discrete object state list.</PARAM>
	<PARAM name="ozptr" > get the pointers register of the discrete object state list.</PARAM>
	<PARAM name="rpar" > get the real parameter register.</PARAM>
	<PARAM name="rpptr" > get the pointers register of the real parameter register.</PARAM>
	<PARAM name="ipar" > get the integer parameter register.</PARAM>
	<PARAM name="ipptr" > get the pointers register of the integer parameter register.</PARAM>
	<PARAM name="opar" > get the object parameter list.</PARAM>
	<PARAM name="oparsz" > get the size of the elements of the object parameter list.</PARAM>
	<PARAM name="opartyp" > get the type of the elements of the object parameter list.</PARAM>
	<PARAM name="opptr" > get the pointers register of the object parameter list.</PARAM>
	<PARAM name="outtb" > get the output register.</PARAM>
	<PARAM name="inpptr" > get the pointers register of the number of regular input ports.</PARAM>
	<PARAM name="outptr" >  get the pointers register of the number of regular output ports.</PARAM>
	<PARAM name="inplnk" > get the pointers register of the links connected to regular input ports.</PARAM>
	<PARAM name="outlnk" > get the pointers register of the links connected to regular output ports.</PARAM>
	<PARAM name="subs" > not used"tevts": get the current date register of the agenda.</PARAM>
	<PARAM name="evtspt" > get the current event register of the agenda.</PARAM>
	<PARAM name="pointi" > get the next event to be activated.</PARAM>
	<PARAM name="iord" > get the vector of blocks activated at the start of the simulation.</PARAM>
	<PARAM name="oord" > get the vector of blocks whose outputs affects computation of continuous state derivatives.</PARAM>
	<PARAM name="zord" > get the vector of blocks whose outputs affects computation of zero-crossing surfaces.</PARAM>
	<PARAM name="funtyp" > get the vector of type of computational functions.</PARAM>
	<PARAM name="ztyp" > get the pointers vector for blocks which use zero-crossing surfaces.</PARAM>
	<PARAM name="cord" > get the vector of blocks whose outputs evolve continuously.</PARAM>
	<PARAM name="ordclk" > get the matrix associated to blocks activated by output activation ports.</PARAM>
	<PARAM name="clkptr" > get the pointers vector for output activation ports.</PARAM>
	<PARAM name="ordptr" > get the pointers vector to ordclk designating the part of ordclk corresponding to a given activation.</PARAM>
	<PARAM name="critev" > get the vector of the critical events.</PARAM>
	<PARAM name="mod" > get the vector pointers of block modes.</PARAM>
	<PARAM name="nmod" > get the length of the vector pointers of block modes.</PARAM>
	<PARAM name="iz" > get the register that store pointers of block->work.</PARAM>
	<PARAM name="izptr" > get the pointers vector of the register that store C pointers of block->work.</PARAM>
	<PARAM name="nblk" > get the number of block.</PARAM>
	<PARAM name="outtbptr" > get the register that store C pointers of outtb.</PARAM>
	<PARAM name="outtbpsz" > get the register that store the size of the elements of outtb.</PARAM>
	<PARAM name="outtbtyp" > get the register that store the type of the elements of outtb.</PARAM>
	<PARAM name="nlnk" > get the number of output.</PARAM>
	<PARAM name="ncord" > get the number of blocks whose outputs evolve continuously.</PARAM>
	<PARAM name="nordptr" > get the number of blocks whose outputs evolve by activation.</PARAM>
	<PARAM name="iwa" > n.d.</PARAM>
	<PARAM name="blocks" > get a scilab list that contains all block structures contains in the diagram.</PARAM>
	<PARAM name="ng" > get length of the zero-crossing surfaces register.</PARAM>
	<PARAM name="g" > get the zero-crossing surfaces register.</PARAM>
	<PARAM name="t0" > get the current time of the simulation.</PARAM>
	<PARAM name="tf" > get the final time of the simulation.</PARAM>
	<PARAM name="Atol" > get the integrator absolute tolerance for the numerical solver.</PARAM>
	<PARAM name="rtol" >  get the integrator relative tolerance for the numerical solver.</PARAM>
	<PARAM name="ttol" > get the tolerance on time of the simulator.</PARAM>
	<PARAM name="deltat" > get the maximum integration time interval.</PARAM>
	<PARAM name="hmax" > get the maximum step size for the numerical solver.</PARAM>
	<PARAM name="nelem" > get the number of elements in outtb.</PARAM>
	<PARAM name="outtb_elem" > get the vector of the number of elements in outtb.</PARAM>
      </PARAMS>
    </PARAM>
    <PARAM name="myvar">
      That output parameter can be an int32 matrix, a
      double matrix or a Tlist. This is given by the input
      parameter.
      
    </PARAM>
  </PARAMS>

  <PARAMS name='lincos' type='XML'>
    <PARAM name="scs_m">
      a Scicos data structure
    </PARAM>
    <PARAM name="x0">
      column vector. Continuous state around which linearization
      to be done (default 0)
    </PARAM>
    <PARAM name="u0">
      column vector. Input around which linearization to be done
      (default 0)
    </PARAM>
    <PARAM name="param">
      param> list with two elements (default list(1.d-6,0))
      param(1): scalar. Perturbation level for linearization;
      the following variation is used
      del([x;u])_i = param(1)+param(1)*1d-4*abs([x;u])_i.
      param(2): scalar. Time t.
    </PARAM>
    <PARAM name="sys">
      state-space system
    </PARAM>
  </PARAMS>

  <PARAMS name='model2blk' type='XML'>
    <PARAM name="blk">
      a scicos_block structure
    </PARAM>
    <PARAM name="model">
      a scicos_model structure
    </PARAM>
  </PARAMS>

  <PARAMS name='phase_simulation' type='XML'>
    <PARAM name="psim">
      get the current phase of the simulation
      <PARAM 	    name="1">
	The simulator is on a discrete activation time.
      </PARAM>
      <PARAM 	    name="2">
	The simulator is realizing a continuous time domain
	integration.
      </PARAM>
    </PARAM>
  </PARAMS>

  <PARAMS name='pointer_xproperty' type='LATEX'>
    <PARAM name="xprop">
      The value gives the type of the states:
      <PARAMS>
	<PARAM name="-1"> an algebraic state. </PARAM>
	<PARAM name="1"> a differential state.</PARAM>
      </PARAMS>
    </PARAM>
  </PARAMS>

  <PARAMS name='scicos' type='LATEX'>
    <PARAM name="toto"> either a Scicos diagram structure (scs\_m) or a  character
    string containing the path of the diagram file (.cos or .cosf
    extension).  If no input argument is used, an empty diagram is
    opened (default name Untitled).
    </PARAM>
    <PARAM name="scs\_m">Scicos diagram structure after edition.</PARAM>
  </PARAMS>
  
  <PARAMS name='scicos_codegeneration' type='XML'>
    <PARAM name="scs_m">
      Scicos diagram (obtained i.e by 'load file.cos')
    </PARAM>
    <PARAM name="Params">
      A list of properties for scicos code generation

      Params(1): silent_mode: if 1 then no message are displayed
      during the code generation and default values
      are taken for the target directory and names.

      Params(2): cblock: if 1 the generated block is replaced by
      a CBLOCK4 that enclosed the generic parameters
      and the generated computational function.

      Params(3): rdnom: sets the default name for the generated
      code.

      Params(4): rpat: sets the default target path for the
      generated code.

      Params(5): libs: sets the additional external libraries
      needed by code generation.

      Params(6): opt: if 0, then the standalone code will not
      be generated -default 1-.

      Params(7): enable_debug: says if additionnal code must be
      generated to debug generated code.

      Params(8): scopes: list of additionnal scopes used in scs_m;
      this params must be a matrix of string of size -1,2.

      Params(9): remove: list of blocks that must be removed for the
      generated code; this params must be a matrix of string
      of size -1,2.
    </PARAM>
    <PARAM name="ok">
      If flag to say if the code generation is successfull
    </PARAM>
    <PARAM name="scs_m">
      The resulting diagram, that encloses the generated block if any.
    </PARAM>
    <PARAM name="%cpr">
      The resulting compiled structure.
    </PARAM>
  </PARAMS>


  <PARAMS name='scicos_debug' type='XML'>
    <PARAM name="level">
      set/get the current level of the Scicos simulation debugging.
      <PARAM 	    name="0">
	no debugging.
      </PARAM>
      <PARAM 	    name="1">
	light debugging information printout.
      </PARAM>
      <PARAM 	    name="2">
	more information printout and execution of Debug Block if any in diagram.
      </PARAM>
      <PARAM 	    name="3">
	silent debugging mode (no information printout) and execution of Debug Block if any in diagram.
      </PARAM>
    </PARAM>
  </PARAMS>

  <PARAMS name='scicos_simulate' type='XML'>
    <PARAM name="scs_m">
      Scicos diagram (obtained by "load file.cos"). Note that the
      version of file.cos must be the current version. If not,
      load into Scicos and save.
    </PARAM>
    <PARAM name="Info">
      a list. It must be list() at the first call, then use output
      Info as input Info for the next calls. Info contains compilation
      and simulation information and is used to avoid recompilation
      when not needed.
    </PARAM>
    <PARAM name="%scicos_context">
      a Scilab struct containing values of symbolic variables used
      in the context and Scicos blocks. This is often used to change a
      parameter in the diagram context. In that case, make sure that in
      the diagram context the variable is defined such that it can be
      modified. Say a variable "a" is to be defined in the context
      having value 1, and later in batch mode, we want to change the
      value of "a". In that case, in the context of the diagram place:
      if ~exists('a') then a=1,end If you want then to run the
      simulation in batch mode using the value a=2, set:
      %scicos_context.a=2
    </PARAM>
    <PARAM name="flag">
      string. If it equals 'nw' (no window), then blocks using
      graphical windows are not executed. Note that the list of such
      blocks must be updated as new blocks are added.
    </PARAM>
    <PARAM name="Info">
      contains compilation and simulation information and is used
      to avoid recompilation when not needed. Normally it should
      not be modified.
    </PARAM>
  </PARAMS>


  <PARAMS name='scicos_time' type='XML'>
    <PARAM name="t">
      that is the current simulated time returned in real number.
    </PARAM>
  </PARAMS>

  <PARAMS name='scicosim' type='XML'>
    <PARAM name="state">
      Scilab tlist containing initial state. Usually generated by
      Scicos Compile. After loading a compiled .cos file, it can be
      found in %cpr.state.
    </PARAM>
    <PARAM name="tcur">
      starting time of simulation. At the beginning it must be zero.
    </PARAM>
    <PARAM name="tf">
      final simulation time.
    </PARAM>
    <PARAM name="sim">
      Scilab tlist containing compilation results. Usually
      generated by Scicos Compile. After loading a compiled
      .cos file, it can be found in %cpr.sim.
    </PARAM>
    <PARAM name="str">
      'start' , 'run' or 'finish'. Function must be first called
      with 'start', then with 'run' one or more times, and
      finally with 'finish'.
    </PARAM>
    <PARAM name="tol">
      vector [atol,rtol,ttol,deltat,realtimescale,solver,hmax]
      where atol, rtol are respectively the absolute and relative
      tolerances for ode or dae solver, ttol is the precision on
      event dates (must be very small), deltat is maximum
      integration interval for each call to ode solver (sometimes
      needed to force restaring the call to solver),
      realtimescale is the correspondance between simulation
      time and real time (0 means no slowing down),
      solver is the choice of solver (0: lsodar, 100: daskr),
      hmax: max step size used by solver.
      Default: [0.0001,1.000E-06,1.000E-10,100001,0,0]
    </PARAM>
    <PARAM name="state">
      state after simulation
    </PARAM>
    <PARAM name="t">
      final reached time. Usually tf but not always.
    </PARAM>
  </PARAMS>

  <PARAMS name='scifunc_block' type='LATEX'>
    <!-- %input ports sizes   1 -->
    <PARAM name="input ports sizes">
      a scalar. Number of regular input ports \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output port sizes   1 -->
    <PARAM name="output port sizes">
      a scalar. Number of regular output ports \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %input event ports sizes   [] -->
    <PARAM name="input event ports sizes">
      a scalar. Number of input event ports \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output events ports sizes   [] -->
    <PARAM name="output events ports sizes">
      a scalar. Number of output event ports \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial continuous state   [] -->
    <PARAM name="initial continuous state">
      a column vector. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial discrete state   [] -->
    <PARAM name="initial discrete state">
      a column vector. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %System parameters vector   [] -->
    <PARAM name="System parameters vector">
      a string: c or d ({\bf CBB} or {\bf
      DBB}), other  types are not supported.   \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial firing vector ($&lt;$0 for no firing)   [] -->
    <PARAM name="initial firing vector ">
      vector. Size of this vector corresponds
      to the number of event outputs. The value of the i-th entry
      specifies the time of the preprogrammed event firing on the i-th
      output event port. If less than zero, no event is preprogrammed. \\
      Properties: Type 'vec' of size sum(\%4)
    </PARAM>
    <!-- %is block always active (0:no, 1:yes)   0 -->
    <PARAM name="is block always active ">
      other dialogues are opened
      consecutively where used may input Scilab code associated with the
      computations needed (block initialization, outputs, continuous and
      discrete state, output events date, block ending)\\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='scifunc_block5' type='LATEX'>
    <!-- %simulation function   toto -->
    <PARAM name="Simulation function">
      Name of the function to be generated and loaded.\\
      Properties: Type 'str' of size 1
    </PARAM>
    <!-- %input ports sizes   1 -->
    <PARAM name="Input ports sizes">
      Number and size of regular input ports. \\
      Properties: Type 'mat' of size [-1,2]
    </PARAM>
    <!-- %input ports type   1 -->
    <PARAM name="Input ports type">
      Set the datatype of the regular input ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output port sizes   1 -->
    <PARAM name="Output port sizes">
      Number and size of regular output ports. \\
      Properties: Type 'mat' of size [-1,2]
    </PARAM>
    <!-- %output ports type   1 -->
    <PARAM name="Output ports type">
      Set the datatype of the regular output ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %input event ports sizes   [] -->
    <PARAM name="Input event ports sizes">
      a vector of ones, size of event input
      ports. The size of the vector gives the number of event
      input ports.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output events ports sizes   [] -->
    <PARAM name="Output events ports sizes">
      a vector of ones, size of event
      output ports. The size of the vector gives the number of of event
      output ports. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial continuous state   [] -->
    <PARAM name="Initial continuous state">
      A column vector of Initial State
      Conditions.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial discrete state   [] -->
    <PARAM name="Initial discrete state">
      A column vector Initial discrete  Conditions.\\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial object state list() -->
    <PARAM name="Initial object state">
      A Scilab list that defines the initial object state (oz).\\
      Properties: Type 'lis' of size -1
    </PARAM>
    <!-- %Real parameters vector   [] -->
    <PARAM name="Real parameters vector">
      column vector. Any parameters used    in the block can be defined here as a column vector.  \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %Integer parameters vector   [] -->
    <PARAM name="Integer parameters vector">
      column vector. Any integer
      parameters used in the block can be defined here as a column
      vector. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %object parameters list  list() -->
    <PARAM name="Object parameters list  ">
      A Scilab list that defines the list of    the Object parameters (opar).\\
      Properties: Type 'lis' of size -1
    </PARAM>
    <!-- %number of modes   0 -->
    <PARAM name="Number of modes">
      Number of Right hand side functions in the
      system. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %number of zero\_crossings   0 -->
    <PARAM name="Number of zero\_crossings">
      Number of zero-crossing surfaces\\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %initial firing vector ($&lt;$0 for no firing)   [] -->
    <PARAM name="Initial firing vector ">
      vector. Size of this vector corresponds
      to the number of event outputs. The value of the i-th entry
      specifies the time of the preprogrammed event firing on the i-th
      output event port. If less than zero, no event is preprogrammed.\\
      Properties: Type 'vec' of size sum(\%7)
    </PARAM>
    <!-- %direct feedthrough (y or n)   y -->
    <PARAM name="Direct feedthrough ">
      character "y" or "n", specifies if block
      has a direct input to output feedthrough. \\
      Properties: Type 'vec' of size 1
    </PARAM>
    <!-- %time dependence (y or n)   n -->
    <PARAM name="Time dependence ">
      Time dependance: character "y" or "n",
      specifies if block output depends explicitly on time. \\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='scifunc_block_m' type='LATEX'>
    <!-- %input ports sizes   1 -->
    <PARAM name="input ports sizes">
      a scalar. Number of regular input ports \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output port sizes   1 -->
    <PARAM name="output port sizes">
      a scalar. Number of regular output ports \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %input event ports sizes   [] -->
    <PARAM name="input event ports sizes">
      a scalar. Number of input event ports \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %output events ports sizes   [] -->
    <PARAM name="output events ports sizes">
      a scalar. Number of output event ports \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial continuous state   [] -->
    <PARAM name="initial continuous state">
      a column vector. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial discrete state   [] -->
    <PARAM name="initial discrete state">
      a column vector. \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %System parameters vector   [] -->
    <PARAM name="System parameters vector">
      a string: c or d ({\bf CBB} or {\bf
      DBB}), other  types are not supported.   \\
      Properties: Type 'vec' of size -1
    </PARAM>
    <!-- %initial firing vector ($&lt;$0 for no firing)   [] -->
    <PARAM name="initial firing vector ">
      vector. Size of this vector corresponds
      to the number of event outputs. The value of the i-th entry
      specifies the time of the preprogrammed event firing on the i-th
      output event port. If less than zero, no event is preprogrammed. \\
      Properties: Type 'vec' of size sum(\%4)
    </PARAM>
    <!-- %is block always active (0:no, 1:yes)   0 -->
    <PARAM name="is block always active ">
      other dialogues are opened
      consecutively where used may input Scilab code associated with the
      computations needed (block initialization, outputs, continuous and
      discrete state, output events date, block ending)\\
      Properties: Type 'vec' of size 1
    </PARAM>
  </PARAMS>

  <PARAMS name='set_blockerror' type='LATEX'>
    <PARAM name="n"> an error number. The following calls are allowed:
    <PARAMS>
      <PARAM name="set\_blockerror(-1)">
	the block has been called with input out of its domain
      </PARAM>
      <PARAM name="set\_blockerror(-2)">
	singularity in a block
      </PARAM>
      <PARAM name="set\_blockerror(-3)">
	block produces an internal error
      </PARAM>
      <PARAM name="set\_blockerror(-16)">
	cannot allocate memory in block
      </PARAM>
    </PARAMS>
    </PARAM>
  </PARAMS>

  <PARAMS name='set_xproperty' type='LATEX'>
    <PARAM name="xprop"> 
      The value gives the type of the states:
      <PARAMS>
	<PARAM name=" -1"> an algebraic state.</PARAM>
	<PARAM name=" 1"> a differential state.</PARAM>
      </PARAMS>
    </PARAM>
  </PARAMS>

  <PARAMS name='setscicosparam' type='XML'>
    <PARAM name="dt">
     : a list that encloses the name and the values
      of the scicos variables to be written in the parameters
      file.
    </PARAM>
    <PARAM name="fic">
     : path+name of the data file.
    </PARAM>
    <PARAM name="ok">
     : a flag to say if the operation is succesfull.
    </PARAM>
  </PARAMS>

  <PARAMS name='sig2data' type='XML'>
    <PARAM name="B">
      a scilab structure that defines a signal:
      <PARAM   name="B.values">
	B data
      </PARAM>
      <PARAM   name="B.time">
	the samples time in the form of
	a columun vector.
      </PARAM>
    </PARAM>
    <PARAM name="x">
      the field B.values
    </PARAM>
    <PARAM name="t">
      the field B.time
    </PARAM>
  </PARAMS>

  <PARAMS name='steadycos' type='XML'>
    <PARAM name="scs_m">
      a Scicos data structure
    </PARAM>
    <PARAM name="X">
      column vector. Continuous state. Can be set to [] if zero.
    </PARAM>
    <PARAM name="U">
      column vector. Input. Can be set to [] if zero.
    </PARAM>
    <PARAM name="Y">
      column vector. Output. Can be set to [] if zero.
    </PARAM>
    <PARAM name="Indx">
      index of entries of X that are not fixed. If all can vary,
      set to 1:$
    </PARAM>
    <PARAM name="Indu">
      index of entries of U that are not fixed. If all can vary,
      set to 1:$
    </PARAM>
    <PARAM name="Indy">
      index of entries of Y that are not fixed. If all can vary,
      set to 1:$
    </PARAM>
    <PARAM name="Indxp">
      index of entries of XP (derivative of x) that need not be
      zero. If all can vary, set to 1:$. Default [].
    </PARAM>
    <PARAM name="param">
      list with two elements (default list(1.d-6,0)). param(1):
      scalar. Perturbation level for linearization; the following
      variation is used del([x;u])_i =
      param(1)+param(1)*1d-4*abs([x;u])_i.
      param(2): scalar. Time t.
    </PARAM>
    <PARAM name="X">
      steady state X
    </PARAM>
    <PARAM name="U">
      stationary input U
    </PARAM>
    <PARAM name="Y">
      output corresponding to steady state found
    </PARAM>
    <PARAM name="XP">
      derivative of the state corresponding to steady state found
    </PARAM>
  </PARAMS>

  <PARAMS name='var2vec' type='XML'>
    <PARAM name="var">
      Input parameter. Can be any types of Scilab objects.
    </PARAM>
    <PARAM name="vec">
      Output parameter. A vector of real numbers.
    </PARAM>
  </PARAMS>

  <PARAMS name='vec2var' type='XML'>
    <PARAM name="vec">
      Input parameter. A vector of real numbers.
    </PARAM>
    <PARAM name="var">
      Output parameter. Can be any types of Scilab objects.
    </PARAM>
  </PARAMS>
</DATA>
