#/* -*- Mode: Makefile -*- */

RM = rm -f
AR = ar cr
FILES_TO_CLEAN = *.CKP *.ln *.BAK *.bak core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut .*~ *.trace so_locations *.orig *.cos *.obj
#
# $(install_sh) $(opt_DATA) 
# 
install_sh=$(SCIDIR)/config/install-sh
opt_DATA=-c -m 644
opt_PROG=-c
opt_SCRIPT=-c
srcdir=.
top_srcdir=.
prefix=/usr/local
top_builddir=$(SCIDIR)

#

all::

GNUMAKEFLAGS=--no-print-dir
RANLIB = ranlib
TERMCAPLIB = -lreadline -lncurses
LIBTOOL= $(SHELL) $(top_builddir)/libtool
CROSS=no
TARGET_MACHINE=

# 
# nsp linking is performed by Makefiles in config/
# 
#
# C compiler
#   compile $(CC) $(CC_OPTIONS) -c file.c 
#   link    $(CC) -o $(PROGRAM) $(OBJS) $(CC_LDFLAGS)
#
CC = gcc
CC_OPTIONS = -g -O2 -Wall -Wno-deprecated-declarations -DGTK_DISABLE_SINGLE_INCLUDES -DGSEAL_ENABLE -I/usr/include/suitesparse -I/usr/include/suitesparse `/usr/bin/pkg-config gtk+-3.0 epoxy clp webkit2gtk-4.0 gtksourceview-3.0 gthread-2.0 fftw3 sndfile alsa portaudio-2.0 gthread-2.0 libgvc libmongoc-1.0  gobject-introspection-1.0 --cflags` -I$(SCIDIR)/src/include
CC_LDFLAGS =   -ldl -rdynamic -Wl,-relax 
CC_PICFLAGS = -fPIC

# C++ 
CXX = g++
CXX_OPTIONS = -g -O2

# CC_OPTIONS with optimize removed if CC=gcc
CC_OPTIONS1 = -g  -Wall -Wno-deprecated-declarations `/usr/bin/pkg-config gtk+-3.0 epoxy clp webkit2gtk-4.0 gtksourceview-3.0 gthread-2.0 fftw3 sndfile alsa portaudio-2.0 gthread-2.0 libgvc libmongoc-1.0  gobject-introspection-1.0 --cflags` -I$(SCIDIR)/src/include
#
# Fortran compiler
#   compile $(FC) -c $(FC_OPTIONS) -c file.f 
#   link    $(FC) -o $(PROGRAM) $(OBJS) $(FC_LDFLAGS)
#
FC = f77
FC_OPTIONS = -g -O2  -Wall
FC_LDFLAGS =   -ldl -rdynamic -Wl,-relax
FC_PICFLAGS = -fPIC

# FC_OPTIONS with optimize removed if FC=g77
FC_OPTIONS1 = -g  -Wall
#
# blas/lapack
#
BLAS_LIBS = -lblas
LAPACK_LIBS = -llapack
#
# Linker
# typically, for linking: $(LD) -o $(PROGRAM) $(OBJS) $(LD_LDFLAGS)
#
LD = /usr/bin/ld -m elf_x86_64
LD_LDFLAGS = 
#
# DLD 
#
DLDLIB = 
DLD_SUBDIR = 
#
# PKG_CONFIG
#
PKG_CONFIG = /usr/bin/pkg-config
#
# PVM 
#
PVMLIB = $(SCIDIR)/pvm3/lib/LINUXX86_64/libpvm3.a
PVMGLIB = $(SCIDIR)/pvm3/lib/LINUXX86_64/libgpvm3.a
PVMROOT = /usr/local/src/nsp2-trunk-gtk3/pvm3
PVMINCLUDE = /usr/local/src/nsp2-trunk-gtk3/pvm3/include
#
# TCL/TK
#
TCLTK_INC_PATH = 
#
# GTK version used for compilation
GTK_PKG=gtk+-3.0
# libraries needed for linking 
# 1- inside nsp 
NSPLIBS=$(SCIDIR)/libs/nsp.a  $(SCIDIR)/libs/graphics-new.a $(SCIDIR)/libs/rand.a $(SCIDIR)/libs/dcd.a $(SCIDIR)/libs/integ.a $(SCIDIR)/libs/approx.a $(SCIDIR)/libs/spmf.a  
EXTERNLIBS = $(PVMLIB) $(PVMGLIB) `/usr/bin/pkg-config gtk+-3.0 epoxy clp webkit2gtk-4.0 gtksourceview-3.0 gthread-2.0 fftw3 sndfile alsa portaudio-2.0 gthread-2.0 libgvc libmongoc-1.0  gobject-introspection-1.0 --libs`  -lspqr -lcholmod -lsuitesparseconfig -lcolamd  -lumfpack -lamd -llapack -lblas -lreadline -lncurses  -lgmp  -lz  -lglpk -lqhull -lstdc++ 
#
# for WIN32 version, libraries to be used 
# and linker options 
WIN32LIBS=-mwindows -lwsock32 -lshell32 -lcomctl32  -lwinspool -lm 
WINLIBS = $(TCLTK_LIBS) $(WIN32LIBS)
LINKEROPT= $(LD_LDFLAGS)
# detect if this is a w32 or w64 version 
NSP_ISS=
SCICOS_GEN_LIB=
TARGET_MACHINE=
#
# Ressource compiler 
#
RC = 
RCVARS = -O coff 
#
#
COMPILE= $(CC)  $(CFLAGS)
FCOMPILE = $(FC)  $(FFLAGS)
CXXCOMPILE= $(CXX) $(CXXFLAGS) 
#

.c.o:
	@echo "compiling $<  Wall "
	@$(COMPILE)  -c $<

.f.o:
	@echo "compiling $<  Wall "
	@$(FCOMPILE)  -c $<

.cpp.o:
	@echo "compiling $<  Wall "
	@$(CXXCOMPILE)  -c $<



